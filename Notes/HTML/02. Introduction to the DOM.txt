
Time Stamp: 9th Jun 2K24 - 01:42 PM..!!

Title: Introduction to the DOM

Category: Learning Resources -> Web Development -> DOM Basics

Keywords: DOM, Document Object Model, web development, HTML, JavaScript

Dev: K.O.H..!! (Harshit Gupta)

GitHub: https://github.com/KOHTheCodeMaster/Frontend-Web-Dev/

----------------------------------------------------------------------------------------------------

1. What is the Document Object Model (DOM)?
-------------------------------------------

Definition:
  - The Document Object Model (DOM) is a programming interface for web documents.
  - It represents the structure of documents as a tree, allowing scripts to dynamically access and update the content,
    structure, and style of HTML documents.

Functionality:
  - Transforms static HTML into a dynamic, live document.
  - Represents the document structure as a tree of objects/nodes.
  - Maintains the hierarchy of HTML elements.
 
Browser Operations:
  - Parses HTML to create a data model.
  - Converts HTML strings into a tree of nodes (the DOM tree).
 
Dynamic Interaction:
  - Nodes in the DOM tree contain properties and methods.
  - JavaScript can be used to manipulate these nodes.
  - Example:
    ```javascript
         const header = document.createElement('header');
         const h1 = document.createElement('h1');
         h1.textContent = 'Hello DOM';
         header.appendChild(h1);
         document.body.appendChild(header);
    ```
 
    Resulting HTML:
    ```html
        <body>
           <header>
           <h1>Hello DOM</h1>
           </header>
        </body>
    ```
 
----------------------------------------------------------------------------------------------------

2. Core Concepts:
-----------------

- Nodes: Everything in an HTML document is a node.
- Elements: Nodes in the DOM tree that represent HTML elements.
- Attributes: Nodes that represent HTML attributes.
- Text: Nodes that represent the text content of elements.

----------------------------------------------------------------------------------------------------

3. Understanding the DOM Tree:
------------------------------

- Root Node: The top-level node of the DOM tree is the `Document` object.
- Parent-Child Relationship: Elements in the DOM tree can have parent-child relationships, forming a hierarchical structure.
- Traversal: You can navigate through the DOM tree using various methods to access and manipulate different nodes.

----------------------------------------------------------------------------------------------------

4. Accessing Elements:
----------------------

Methods:
 - `document.getElementById(id)`: Returns the element with the specified ID.
 - `document.getElementsByClassName(className)`: Returns a collection of elements with the specified class name.
 - `document.getElementsByTagName(tagName)`: Returns a collection of elements with the specified tag name.

Properties:
 - `document.body`: Returns the `<body>` element of the current document.
 - `document.head`: Returns the `<head>` element of the current document.

----------------------------------------------------------------------------------------------------

5. Manipulating Elements:
-------------------------

Creating Elements:
    - `document.createElement(tagName)`: Creates a new element with the specified tag name.

Modifying Elements:
    - `element.innerHTML`: Sets or returns the HTML content of an element.
    - `element.style.property`: Sets or returns the style property of an element.

Adding and Removing Elements:
    - `element.appendChild(node)`: Appends a new child node to an element.
    - `element.removeChild(node)`: Removes a child node from an element.

----------------------------------------------------------------------------------------------------

6. Event Handling:
------------------

- Adding Event Listeners: `element.addEventListener(event, function)` - Attaches an event handler to the specified element.
- Common Events: `click`, `mouseover`, `keydown`, `submit`, etc.

----------------------------------------------------------------------------------------------------

7. Example:
-----------

   ```html
   <!DOCTYPE html>
   <html>
   <head>
       <title>DOM Basics Example</title>
   </head>
   <body>
       <div id="container">
           <p>Hello, World!</p>
       </div>

       <script>
           // Accessing and modifying elements
           const container = document.getElementById('container');
           container.innerHTML = 'Hello, ChatGPT!';

           // Creating a new element
           const newParagraph = document.createElement('p');
           newParagraph.textContent = 'This is a new paragraph.';
           container.appendChild(newParagraph);

           // Adding an event listener
           newParagraph.addEventListener('click', function() {
               alert('You clicked the new paragraph!');
           });
       </script>
   </body>
   </html>
   ```

----------------------------------------------------------------------------------------------------

8. Summarized Report of Short & Crisp Pointers:
-----------------------------------------------

- What is DOM: Programming interface for web documents, representing the structure of documents as a tree.
- Core Concepts: Nodes, elements, attributes, text.
- DOM Tree: Root node, parent-child relationships, traversal methods.
- Accessing Elements: Methods and properties for accessing elements in the DOM.
- Manipulating Elements: Creating, modifying, adding, and removing elements.
- Event Handling: Adding event listeners for common events.
- Example: Basic example demonstrating DOM manipulation and event handling.

- Converts HTML into a live document.
- Represents the page structure as a tree of nodes.
- Allows dynamic manipulation using JavaScript.
    
----------------------------------------------------------------------------------------------------
