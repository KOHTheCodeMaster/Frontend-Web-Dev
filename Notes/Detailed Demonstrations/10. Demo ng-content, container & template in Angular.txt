
Time Stamp: 3rd Jul. 2K24 - 07:23 PM..!!

Title: Angular's template handling features like ng-template, ng-container, ngTemplateOutlet and template variables.

Category: Web Development -> Angular -> Template Handling

Keywords: Angular, ng-template, ng-container, ngTemplateOutlet, Template Variables

Purpose: To understand Angular's template handling features like ng-template, ng-container, ngTemplateOutlet, and template variables.

Dev: K.O.H..!! (Harshit Gupta)

GitHub: https://github.com/KOHTheCodeMaster/Frontend-Web-Dev/

----------------------------------------------------------------------------------------------------

ng-template, ng-container, ngTemplateOutlet, and template variables in Angular:
-------------------------------------------------------------------------------

Introduction:
-------------

- ng-template: Defines reusable templates that are not rendered by default.
- ng-container: Acts as a placeholder without adding extra elements to the DOM.
- ngTemplateOutlet: Dynamically renders the content of an ng-template based on the provided context.
- Template Variables: Pass dynamic data into templates using let and context bindings.

----------------------------------------------------------------------------------------------------

Example:
--------

- This example demonstrates the use of Angular's ng-template, ng-container, ngTemplateOutlet, and template variables to dynamically render and manage reusable HTML templates.
- We define two templates:
    - one for displaying the name and city of a cafe,
    - another for displaying food items.
- Using Angular's structural directives and template handling capabilities, we dynamically render these templates based on the context provided, ensuring a clean and efficient DOM structure without unnecessary elements.

----------------------------------------------------------------------------------------------------

Code:
-----

```typescript
import { Component, TemplateRef, ViewChild, ViewContainerRef } from '@angular/core';
import { NgTemplateOutlet } from '@angular/common';

@Component({
    imports: [NgTemplateOutlet],
    selector: 'app-demo-ng-content-container-and-template',
    standalone: true,
    template: `
        <ng-template #foodHeader let-cafeName let-city="city">
            <div>
                <h2>Cafe Name -> {{ cafeName }}</h2>
                <p>City -> {{ city }}</p>
            </div>
        </ng-template>

        <ng-template #foodTemplate let-food="food">
            <div>
                <h2>{{ food.name }}</h2>
                <p>{{ food.description }}</p>
            </div>
        </ng-template>

        <ng-container *ngTemplateOutlet="foodHeader; context: { $implicit: cafeName, city: city }"></ng-container>

        <button (click)="addFood()">Add Food Item</button>
        <div #container></div>
    `
})
export class DemoNgContentContainerAndTemplateComponent {
    @ViewChild('foodTemplate', { read: TemplateRef }) foodTemplate!: TemplateRef<any>;
    @ViewChild('container', { read: ViewContainerRef }) container!: ViewContainerRef;

    cafeName: string = 'The Old Cafe';
    city: string = 'Tokyo';

    foods = [
        { name: 'Pizza', description: 'Cheesy and delicious' },
        { name: 'Pasta', description: 'Rich and creamy' }
    ];

    addFood() {
        this.foods.forEach((food, index) => {
            this.container.createEmbeddedView(this.foodTemplate, { food, index });
        });
    }
}
```

----------------------------------------------------------------------------------------------------

Step-by-Step Explanation:
-------------------------

Imports and Component Decorator:

```typescript
import { Component, TemplateRef, ViewChild, ViewContainerRef } from '@angular/core';
import { NgTemplateOutlet } from '@angular/common';
```

- Component Imports:
  - `Component`: Decorator to define the Angular component.
  - `TemplateRef`: Represents an embedded template that can be used to instantiate embedded views.
  - `ViewChild`: Decorator to access a child component, directive, or DOM element in a parent component.
  - `ViewContainerRef`: Represents a container where one or more views can be attached.
  - `NgTemplateOutlet`: Directive used to render a template dynamically.


Component Decorator:

```typescript
@Component({
    imports: [NgTemplateOutlet],
    selector: 'app-demo-ng-content-container-and-template',
    standalone: true,
    template: `
        ...
    `
})
```

- Component Configuration:
  - `imports`: Specifies the Angular modules or directives that are imported.
  - `selector`: Defines the custom HTML tag used for this component.
  - `standalone`: Indicates that the component does not depend on any other Angular modules.
  - `template`: Inline template defining the component's HTML structure.


Template Definitions:

```html
<ng-template #foodHeader let-cafeName let-city="city">
    <div>
        <h2>Cafe Name -> {{ cafeName }}</h2>
        <p>City -> {{ city }}</p>
    </div>
</ng-template>

<ng-template #foodTemplate let-food="food">
    <div>
        <h2>{{ food.name }}</h2>
        <p>{{ food.description }}</p>
    </div>
</ng-template>
```

- `<ng-template>` Elements:
  - Define reusable templates with template variables.
  - `#foodHeader`: Template for displaying the cafe name and city.
  - `#foodTemplate`: Template for displaying food items.
  - `let-cafeName`, `let-city`, `let-food`: Template variables used to pass data into the templates.


Template Outlet:

```html
<ng-container *ngTemplateOutlet="foodHeader; context: { $implicit: cafeName, city: city }"></ng-container>
```

- `<ng-container>` with `ngTemplateOutlet`:
  - Dynamically renders the `foodHeader` template.
  - `context`: Provides data to the template via template variables. `$implicit` is used for the default variable (`cafeName`), and `city` is explicitly named.


Button and Container:

```html
<button (click)="addFood()">Add Food Item</button>
<div #container></div>
```

- Button: Adds new food items to the container when clicked.
- Container: Holds dynamically created views of the food items.

Component Class:

- ViewChild Decorators: Access the `foodTemplate` and `container` references in the component class.

- Class Properties:
  - `cafeName` and `city`: Data used in the `foodHeader` template.
  - `foods`: Array of food items with name and description.

- addFood Method:
  - Iterates over the `foods` array.
  - Creates an embedded view for each food item using the `foodTemplate`.
  - Passes the `food` and `index` as context to the template.

----------------------------------------------------------------------------------------------------

Usage, Use-Cases, and Best Practices:
-------------------------------------

Usage:
- Reusable Templates: Use `ng-template` to define reusable HTML structures.
- Dynamic Rendering: Use `ng-container` and `ngTemplateOutlet` to dynamically render templates with provided context.

Use-Cases:
- Dynamic Content: Rendering dynamic lists or components based on changing data.
- Modular Design: Separating different parts of a UI into reusable templates.

Limitations:
- Complexity: Can increase the complexity of the template logic.
- Debugging: Debugging dynamic templates can be challenging.

Possible Scenarios:
- Dynamic Forms: Creating dynamic forms with different input types and validation.
- Content Projection: Projecting different types of content based on user actions or data.

Edge Cases:
- Template Variables: Ensure template variables are correctly passed to avoid undefined errors.
- Container Management: Properly manage view containers to avoid memory leaks or unnecessary re-renders.

Best Practices:
- Template Separation: Keep templates small and focused on a single responsibility.
- Context Usage: Use the context object to pass necessary data into templates.
- Clean DOM: Use `ng-container` to avoid adding unnecessary elements to the DOM.


Conclusion:
-----------

- This detailed analysis and explanation of the provided Angular code example covers the usage of `ng-template`, `ng-container`, `ngTemplateOutlet`, and template variables.
- By following the outlined best practices and understanding the use-cases, limitations, and possible scenarios, we can effectively utilize these features in your Angular applications to create dynamic and reusable UI components.

----------------------------------------------------------------------------------------------------
