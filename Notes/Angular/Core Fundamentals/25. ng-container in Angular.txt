
Time Stamp: 1st Jul. 2K24 - 02:09 PM..!!

Title: Understanding ng-container in Angular

Category: Web Development -> Angular -> Structural Directives

Keywords: Angular, ng-container, ngTemplateOutlet, structural directives, DOM manipulation

Purpose: To understand `ng-container` in Angular, focusing on usage, use-cases, limitations, and detailed explanation.

Dev: K.O.H..!! (Harshit Gupta)

GitHub: https://github.com/KOHTheCodeMaster/Frontend-Web-Dev/

----------------------------------------------------------------------------------------------------

Understanding ng-container in Angular
-------------------------------------

1. Overview:
------------

- ng-container is a special Angular element used to group elements without adding extra nodes to the DOM.
- It is useful for applying structural directives without affecting the DOM structure.

Usage:
Example: With *ngIf
    - ng-container used with `*ngIf` allows for cleaner templates without unnecessary wrapper elements.
    ```html
        <ng-container *ngIf="condition">
            <p>Condition is true</p>
        </ng-container>
    ```

Example: With else
    - In the second example, an `ng-template` is used to handle the `else` case, providing a flexible way to manage conditional content.
    ```html
        <ng-container *ngIf="condition; else templateA">
        <p>Condition is true</p>
        </ng-container>
        <ng-template #templateA>
        <p>Condition is false</p>
        </ng-template>
    ```

----------------------------------------------------------------------------------------------------

2. Combining Multiple Structural Directives:
--------------------------------------------

Problem:
  ```html
      <ul>
        <li *ngFor="let item of items" *ngIf="item.isValid">
          {{ item.name }}
        </li>
      </ul>
  ```
  - This will not work because multiple structural directives cannot be applied to the same element.

Solution:
    ```html
      <ul>
        <ng-container *ngFor="let item of items">
          <li *ngIf="item.isValid">
            {{ item.name }}
          </li>
        </ng-container>
      </ul>
    ```
    - ng-container allows the separation of `*ngFor` and `*ngIf` without adding additional elements to the DOM, maintaining a clean and efficient structure.

----------------------------------------------------------------------------------------------------

3. Use alongside ngTemplateOutlet:
----------------------------------

Problem: In a large HTML document, a small portion needs to be repeated in different places.

Solution:
    ```html
        <!-- Define the template -->
        <ng-template #tmpl let-text>
            <h1>{{ text }}</h1>
        </ng-template>

        <!-- Use the template in different places -->
        <ng-container *ngTemplateOutlet="tmpl; context: {$implicit: 'Hello'}"></ng-container>
        <ng-container *ngTemplateOutlet="tmpl; context: {$implicit: 'World'}"></ng-container>
    ```

Explanation:
- ngTemplateOutlet directive combined with `ng-container` provides a way to instantiate template views without adding extra elements.
- This approach maintains a clear and organized HTML structure.

----------------------------------------------------------------------------------------------------

4. Benefits, Limitations & Best Practices:
------------------------------------------

Benefits of ng-container:
- Cleaner DOM: Avoids unnecessary wrapper elements, leading to a more efficient and readable DOM.
- Flexible: Facilitates the use of multiple structural directives.
- Performance: Reduces the number of elements rendered by the browser, potentially improving performance.

Limitations:
- Invisible in the DOM: Since `ng-container` does not render in the DOM, it cannot be styled or targeted by CSS or JavaScript.

Best Practices:
- Use `ng-container` to keep the DOM clean and efficient.
- Combine `ng-container` with `ngTemplateOutlet` for reusable and modular templates.
- Avoid overusing `ng-container` to keep the template understandable.

----------------------------------------------------------------------------------------------------

5. Comprehensive Example: Menu Item Component
---------------------------------------------

Component Template:
    - The `menu-item` component uses `ng-container` to conditionally render item details and apply `ngTemplateOutlet` for reusable header and footer templates.

    ```typescript
        @Component({
          selector: 'menu-item',
          template: `
            <div class="menu-item">
              <ng-container *ngTemplateOutlet="headerTemplate"></ng-container>
              <ng-container *ngFor="let item of items">
                <ng-container *ngIf="item.isAvailable">
                  <div class="item-details">
                    <h3>{{ item.name }}</h3>
                    <p>{{ item.description }}</p>
                  </div>
                </ng-container>
              </ng-container>
              <ng-container *ngTemplateOutlet="footerTemplate"></ng-container>
            </div>
          `,
        })
        export class MenuItemComponent {
          @Input() items: Array<{ name: string; description: string; isAvailable: boolean }>;
          @Input() headerTemplate: TemplateRef<any>;
          @Input() footerTemplate: TemplateRef<any>;
        }
    ```

Using the Component:
    - We pass an array of menu items and templates for the header and footer.

    ```html
        <ng-template #header>
          <h1>Menu</h1>
        </ng-template>

        <ng-template #footer>
          <p>End of Menu</p>
        </ng-template>

        <menu-item [items]="menuItems" [headerTemplate]="header" [footerTemplate]="footer"></menu-item>
    ```

    Rendered DOM
    - The content is projected into the `menu-item` component without adding extra DOM elements, maintaining a clean structure.

    ```html
        <menu-item>
          <div class="menu-item">
            <h1>Menu</h1>
            <div class="item-details">
              <h3>Pizza</h3>
              <p>Cheesy and delicious</p>
            </div>
            <div class="item-details">
              <h3>Pasta</h3>
              <p>Rich and creamy</p>
            </div>
            <p>End of Menu</p>
          </div>
        </menu-item>
    ```

----------------------------------------------------------------------------------------------------

6. Summary:
-----------

- ng-container is a powerful Angular element for grouping structural directives without affecting the DOM.
- It is essential for maintaining clean, efficient, and readable templates.
- Combining `ng-container` with `ngTemplateOutlet` enhances reusability and modularity.
- Proper usage of `ng-container` leads to better performance and a more organized DOM structure.

----------------------------------------------------------------------------------------------------
