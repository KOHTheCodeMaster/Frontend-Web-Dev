
Time Stamp: 2nd Jul. 2K24 - 10:01 PM..!!

Title: Understanding ng-template in Angular

Category: Web Development -> Angular -> Template Handling

Keywords: Angular, ng-template, ngTemplateOutlet, TemplateRef, ViewContainerRef

Purpose: To understand `ng-template` in Angular, focusing on usage, use-cases, limitations, and detailed explanation.

Dev: K.O.H..!! (Harshit Gupta)

GitHub: https://github.com/KOHTheCodeMaster/Frontend-Web-Dev/

----------------------------------------------------------------------------------------------------

Understanding ng-template in Angular
------------------------------------

1. Overview:
------------

- ng-template is an Angular element used to define template content that is not rendered by default.
- It allows for dynamic and conditional rendering of templates, offering greater control over how and when content is displayed.

Basic Usage:
- Example:
  ```html
      <ng-template>
        <p>This content will not be rendered by default.</p>
      </ng-template>
  ```

- Explanation: Content inside `<ng-template>` is not rendered until explicitly instructed by Angular.

Structural Directives:
- Definition: Structural directives, such as `*ngIf` and `*ngFor`, use `<ng-template>` behind the scenes to add and remove content from the DOM based on certain conditions.

- Example:
  ```html
      <div *ngIf="condition">
        <p>Condition is true</p>
      </div>
  ```
  - This shorthand is transformed by Angular into:
  ```html
      <ng-template [ngIf]="condition">
        <div>
          <p>Condition is true</p>
        </div>
      </ng-template>
  ```

- Explanation: Angular uses `<ng-template>` to handle the conditional rendering logic.

----------------------------------------------------------------------------------------------------

2. TemplateRef and ViewContainerRef:
------------------------------------

- TemplateRef:
  - Represents the embedded template.
  - Can be queried and manipulated programmatically.

- ViewContainerRef: Used to create embedded views from a template reference.

- Example:
  ```typescript
      @Component({
        selector: 'app-root',
        template: `
          <ng-template #myTemplate>
            <p>This is a dynamic template!</p>
          </ng-template>
          <button (click)="insertTemplate()">Insert Template</button>
        `
      })
      export class AppComponent {
        @ViewChild('myTemplate', { read: TemplateRef }) myTemplate!: TemplateRef<any>;

        constructor(private viewContainerRef: ViewContainerRef) {}

        insertTemplate() {
          this.viewContainerRef.createEmbeddedView(this.myTemplate);
        }
      }
  ```

- Explanation:
    - The `insertTemplate` method inserts the content of `myTemplate` into the view container when the button is clicked.
    - The @ViewChild decorator is used to query and get a reference to the ng-template in the component's template.
    - { read: TemplateRef } specifies that the reference should be read as a TemplateRef instance.

- Breakdown:
    - 'myTemplate': The local template reference variable defined in the template using #myTemplate.
    - { read: TemplateRef }: This tells Angular to read the reference as a TemplateRef.
    - myTemplate!: TemplateRef<any>: Declares a class property to store the reference.

----------------------------------------------------------------------------------------------------

3. Template Variables:
----------------------

- Usage: Template variables can be used in conjunction with `ngTemplateOutlet` to render the content defined inside `<ng-template>` tags.

- Example:
  ```html
      <ng-template #templateRef let-name>
        <p>Hello, {{ name }}!</p>
      </ng-template>

      <ng-container *ngTemplateOutlet="templateRef; context: { $implicit: 'Angular' }"></ng-container>
  ```

- Explanation: The `ngTemplateOutlet` directive renders the content of `templateRef` with the provided context, making `name` available inside the template.

----------------------------------------------------------------------------------------------------

4. Querying Templates:
----------------------

- Example:
  ```typescript
      @Component({
        selector: 'app-root',
        template: `
          <ng-template #templateRef>
            <p>This is a template reference</p>
          </ng-template>
        `
      })
      export class AppComponent {
        @ViewChild('templateRef', { read: TemplateRef }) templateRef!: TemplateRef<any>;

        constructor(private viewContainerRef: ViewContainerRef) {}

        renderTemplate() {
          this.viewContainerRef.createEmbeddedView(this.templateRef);
        }
      }
  ```

- Explanation: The `ViewChild` decorator is used to query the `TemplateRef`, which can then be rendered programmatically.

----------------------------------------------------------------------------------------------------

5. Context and Template Variables:
----------------------------------

- Definition:
  - Context allows passing data into the `<ng-template>` elements.
  - Variables can be accessed using `let` and `as` declarations.

- Example:
  ```html
      <ng-template #templateRef let-name let-age="age">
        <p>Name: {{ name }}, Age: {{ age }}</p>
      </ng-template>

      <ng-container *ngTemplateOutlet="templateRef; context: { $implicit: 'John', age: 30 }"></ng-container>
  ```

- Explanation:
  - `$implicit` is a default placeholder for the first variable.
  - Additional variables are declared with `let`.

----------------------------------------------------------------------------------------------------

6. Comprehensive Example: Dynamic Food Menu
-------------------------------------------

- Component Template:

```typescript
    @Component({
      selector: 'app-menu',
      template: `
        <ng-template #foodTemplate let-food="food">
          <div class="food-item">
            <h2>{{ food.name }}</h2>
            <p>{{ food.description }}</p>
          </div>
        </ng-template>

        <button (click)="addFood()">Add Food Item</button>
        <div #container></div>
      `
    })
    export class MenuComponent {
      @ViewChild('foodTemplate', { read: TemplateRef }) foodTemplate!: TemplateRef<any>;
      @ViewChild('container', { read: ViewContainerRef }) container!: ViewContainerRef;

      foods = [
        { name: 'Pizza', description: 'Cheesy and delicious' },
        { name: 'Pasta', description: 'Rich and creamy' }
      ];

      addFood() {
        const food = this.foods.pop();
        if (food) {
          this.container.createEmbeddedView(this.foodTemplate, { food });
        }
      }
    }
```

Explanation:

- foodTemplate: Defines the template for each food item.
- container: A `ViewContainerRef` where the food items will be inserted.
- addFood: Method to dynamically add food items to the view container.

----------------------------------------------------------------------------------------------------

7. Summary:
-----------

- ng-template is used for defining content that is conditionally or programmatically rendered.
- It provides flexibility in template handling, allowing for dynamic and reusable content.
- Combining `ng-template` with `ngTemplateOutlet` and `TemplateRef` offers powerful template manipulation capabilities.
- Proper usage ensures cleaner, more maintainable, and performant Angular applications.

----------------------------------------------------------------------------------------------------
