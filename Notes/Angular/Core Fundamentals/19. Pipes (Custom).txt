
Time Stamp: 24th Jun. 2K24 - 10:47 PM..!!

Title: Built-in Pipes in Angular

Category: Web Development -> Angular -> Custom Pipes

Keywords: Angular, Custom Pipes, Pipe Transformation, Angular CLI, Pipe Decorator

Purpose: Understanding creating and using custom pipes in Angular

Dev: K.O.H..!! (Harshit Gupta)

GitHub: https://github.com/KOHTheCodeMaster/Frontend-Web-Dev/

----------------------------------------------------------------------------------------------------

1. Introduction:
----------------

- Pipes in Angular allow data transformation within templates.
- While Angular provides a range of built-in pipes, you can create custom pipes to handle specific transformation logic that suits your application's needs.

Creating a Custom Pipe:

Step-by-Step Guide

1. Generate a Pipe using Angular CLI -> ` ng generate pipe customPipe `

2. Pipe Class Definition:
    - Import `Pipe` and `PipeTransform` from `@angular/core`.
    - Use the `@Pipe` decorator to define metadata for the pipe.
    - Implement the `PipeTransform` interface to define the `transform` method.

    ```typescript
        import { Pipe, PipeTransform } from '@angular/core';

        @Pipe({
          name: 'customPipe'
        })
        export class CustomPipe implements PipeTransform {
          transform(value: any, ...args: any[]): any {
            // Transformation logic here
            return value;
          }
        }
    ```

Example: Reverse String Pipe

1. Generate the Pipe -> ` ng generate pipe reverseString `

2. Implement the Pipe
    ```typescript
        import { Pipe, PipeTransform } from '@angular/core';

        @Pipe({
          name: 'reverseString'
        })
        export class ReverseStringPipe implements PipeTransform {
          transform(value: string): string {
            return value.split('').reverse().join('');
          }
        }
    ```

3. Use the Pipe in a Template
    ` <p>{{ 'Hola..!! ^-^' | reverseString }}</p> `
    - Output: `^-^ !!..olaH`

----------------------------------------------------------------------------------------------------

2. Using Parameters in Custom Pipes:
------------------------------------

Custom pipes can accept additional parameters to control their behavior.

Example: Exponential Pipe

1. Generate the Pipe -> ` ng generate pipe exponential `

2. Implement the Pipe
    ```typescript
        import { Pipe, PipeTransform } from '@angular/core';

        @Pipe({
          name: 'exponential'
        })
        export class ExponentialPipe implements PipeTransform {
          transform(value: number, exponent: number = 1): number {
            return Math.pow(value, exponent);
          }
        }
    ```

3. Use the Pipe with Parameters in a Template
    ` <p>{{ 2 | exponential:3 }}</p> `
    - Output: `8` (2 raised to the power of 3)

----------------------------------------------------------------------------------------------------

3. Custom Pipe with Multiple Parameters:
----------------------------------------

Example: Append Text Pipe

1. Generate the Pipe -> ` ng generate pipe appendText `

2. Implement the Pipe
    ```typescript
        import { Pipe, PipeTransform } from '@angular/core';

        @Pipe({
          name: 'appendText'
        })
        export class AppendTextPipe implements PipeTransform {
          transform(value: string, text: string, position: 'start' | 'end' = 'end'): string {
            return position === 'start' ? text + value : value + text;
          }
        }
    ```

3. Use the Pipe with Multiple Parameters in a Template
    ` <p>{{ 'Angular' | appendText:' is awesome':'start' }}</p> `
    - Output: ` is awesomeAngular`

----------------------------------------------------------------------------------------------------

4. Including the Custom Pipe in a Standalone Component:
-------------------------------------------------------

Example

1. Component Definition
    ```typescript
        import { Component } from '@angular/core';
        import { CommonModule } from '@angular/common';
        import { ReverseStringPipe } from './reverse-string.pipe';
        import { AppendTextPipe } from './append-text.pipe';

        @Component({
          selector: 'app-demo-custom-pipes',
          standalone: true,
          imports: [CommonModule, ReverseStringPipe, AppendTextPipe],
          templateUrl: './demo-custom-pipes.component.html',
          styleUrls: ['./demo-custom-pipes.component.css']
        })
        export class DemoCustomPipesComponent {
          text: string = 'Hello Angular';
        }
    ```

2. Template Usage
    ```html
        <div>
          <!-- ReverseStringPipe Example -->
          <h2>ReverseStringPipe Example</h2>
          <p>{{ text | reverseString }}</p>

          <!-- AppendTextPipe Example -->
          <h2>AppendTextPipe Example</h2>
          <p>{{ text | appendText:' - Angular':'end' }}</p>
        </div>
    ```

----------------------------------------------------------------------------------------------------

5. Complete Comprehensive Example:
----------------------------------

Code Snippet:

demo-custom-pipes.component.ts
```typescript
    import { Component } from '@angular/core';
    import { FormsModule } from '@angular/forms';
    import { NgFor } from '@angular/common';
    import { AppendTextPipe } from "./append-text.pipe";
    import { ReverseStringPipe } from "./reverse-string.pipe";
    import { ExponentialPipe } from "./exponential.pipe";
    import { FilterPipe } from "./filter.pipe";

    @Component({
        selector: 'app-demo-custom-pipes',
        standalone: true,
        imports: [FormsModule, NgFor, ReverseStringPipe, AppendTextPipe, ExponentialPipe, FilterPipe],
        templateUrl: './demo-custom-pipes.component.html',
    })
    export class DemoCustomPipesComponent {
        name: string = 'John Doe';
        searchText: string = '';
        items: string[] = ['Mobile', 'Laptop', 'PC'];
    }
```

demo-custom-pipes.component.html
```html
    <div>
      <h2>Custom Pipe Examples:</h2>

      <!-- ReverseStringPipe -->
      <h2>Reverse String Pipe</h2>
      <p>{{ name | reverseString }}</p>

      <!-- ExponentialPipe -->
      <h2>Exponential Pipe</h2>
      <p>{{ 2 | exponential:3 }}</p>

      <!-- AppendTextPipe -->
      <h2>Append Text Pipe</h2>
      <p>{{ name | appendText:'Greetings ':'start' }}</p>
      <p>{{ 'Mr. ' | appendText:name | appendText:' is here!':'end' }}</p>

      <!-- FilterPipe -->
      <div>
        <h2>Search Filter Pipe</h2>
        <input [(ngModel)]="searchText" placeholder="Search Items">
        <ul>
          <li *ngFor="let item of items | filter:searchText">{{ item }}</li>
        </ul>
      </div>
    </div>
```

reverse-string.pipe.ts
```typescript
    import { Pipe, PipeTransform } from '@angular/core';

    @Pipe({
        name: 'reverseString',
        standalone: true
    })
    export class ReverseStringPipe implements PipeTransform {
        transform(value: string): string {
            return value.split('').reverse().join('');
        }
    }
```

exponential.pipe.ts
```typescript
    import { Pipe, PipeTransform } from '@angular/core';

    @Pipe({
        name: 'exponential',
        standalone: true
    })
    export class ExponentialPipe implements PipeTransform {
        transform(value: number, exponent: number = 1): number {
            return Math.pow(value, exponent);
        }
    }
```

append-text.pipe.ts
```typescript
    import { Pipe, PipeTransform } from '@angular/core';

    @Pipe({
        name: 'appendText',
        standalone: true
    })
    export class AppendTextPipe implements PipeTransform {
        transform(value: string, text: string, position: 'start' | 'end' = 'end'): string {
            return position === 'start' ? text + value : value + text;
        }
    }
```

filter.pipe.ts
```typescript
    import { Pipe, PipeTransform } from '@angular/core';

    @Pipe({
        name: 'filter',
        standalone: true
    })
    export class FilterPipe implements PipeTransform {
        transform(items: any[], searchText: string): any[] {
            if (!items || !searchText) return items;
            searchText = searchText.toLowerCase();
            return items.filter(item => item.toLowerCase().includes(searchText));
        }
    }
```

Explanation:

1. ReverseStringPipe (`reverse-string.pipe.ts`):
   - Purpose: Reverses the input string.
   - Pipe Definition:
     - Decorator: `@Pipe({ name: 'reverseString', standalone: true })` defines the name and standalone nature of the pipe.
     - Transform Method: `transform(value: string): string` takes a string, splits it into an array of characters, reverses the array, and joins it back into a string.
   - Usage in Template:
     - `{{ name | reverseString }}` reverses the string `name`.

2. ExponentialPipe (`exponential.pipe.ts`):
   - Purpose: Computes the exponential value.
   - Pipe Definition:
     - Decorator: `@Pipe({ name: 'exponential', standalone: true })` defines the name and standalone nature of the pipe.
     - Transform Method: `transform(value: number, exponent: number = 1): number` calculates the value raised to the power of the exponent.
   - Usage in Template:
     - `{{ 2 | exponential:3 }}` computes `2` to the power of `3`.

3. AppendTextPipe (`append-text.pipe.ts`):
   - Purpose: Appends text to the input string.
   - Pipe Definition:
     - Decorator: `@Pipe({ name: 'appendText', standalone: true })` defines the name and standalone nature of the pipe.
     - Transform Method: `transform(value: string, text: string, position: 'start' | 'end' = 'end'): string`
        - appends text to the start or end of the string based on the position.
   - Usage in Template:
     - `{{ name | appendText:'Greetings ':'start' }}` appends "Greetings " at the start of `name`.
     - `{{ 'Mr. ' | appendText:name | appendText:' is here!':'end' }}` appends `name` after "Mr. " and " is here!" after `name`.

4. FilterPipe (`filter.pipe.ts`):
   - Purpose: Filters an array based on a search term.
   - Importing Pipe and PipeTransform: `import { Pipe, PipeTransform } from '@angular/core';`
      - `Pipe` decorator is used to define the pipe.
      - `PipeTransform` interface is implemented by the pipe class to create a custom transformation.
   - Pipe Definition:
     - Decorator: `@Pipe({ name: 'filter', standalone: true })` Defines the name of the pipe which will be used in the templates (`filter`)
                  and standalone nature of the pipe.
     - Transform Method: `transform(items: any[], searchText: string): any[]` filters the array `items` based on `searchText`.
   - Usage in Template:
     - Binds the input field to `searchText` using `[(ngModel)]="searchText"`.
     - Filters the `items` array based on `searchText` in `*ngFor="let item of items | filter:searchText"`.

----------------------------------------------------------------------------------------------------

6. Summary:
-----------

- Custom pipes in Angular are utilized to transform data dynamically within Angular templates, providing tailored data display and manipulation.

- Pipe Setup:
  - Pipe Imports: Import necessary Angular core modules.    //  import {Pipe, PipeTransform} from '@angular/core';
  - Pipe Definition: Define the pipe using `@Pipe` and implement the `PipeTransform` interface to handle transformation logic.
  - Integrate the pipe in components and templates using Angular's data binding and directives.

- Component Setup:
  - Custom Pipe Imports: Import custom pipes created for specific functionality.
  - Template Integration: Apply the custom pipe to dynamically filter items in the component's template.

- Complete Comprehensive Example: Demonstrates how to create and use custom pipes.

----------------------------------------------------------------------------------------------------
