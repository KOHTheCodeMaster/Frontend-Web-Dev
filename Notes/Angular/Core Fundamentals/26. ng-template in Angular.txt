
Time Stamp: 2nd Jul. 2K24 - 10:01 PM..!!

Title: Understanding ng-template in Angular

Category: Web Development -> Angular -> Template Handling

Keywords: Angular, ng-template, ngTemplateOutlet, TemplateRef, ViewContainerRef

Purpose: To understand `ng-template` in Angular, focusing on usage, use-cases, limitations, and detailed explanation.

Dev: K.O.H..!! (Harshit Gupta)

GitHub: https://github.com/KOHTheCodeMaster/Frontend-Web-Dev/

----------------------------------------------------------------------------------------------------

Understanding ng-template in Angular
------------------------------------

1. Overview:
------------

- ng-template is an Angular element used to define template content that is not rendered by default.
- It allows for dynamic and conditional rendering of templates, offering greater control over how and when content is displayed.

Basic Usage:
- Example:
  ```html
      <ng-template>
        <p>This content will not be rendered by default.</p>
      </ng-template>
  ```

- Explanation: Content inside `<ng-template>` is not rendered until explicitly instructed by Angular.

Structural Directives:
- Definition: Structural directives, such as `*ngIf` and `*ngFor`, use `<ng-template>` behind the scenes to add and remove content from the DOM based on certain conditions.

- Example:
  ```html
      <div *ngIf="condition">
        <p>Condition is true</p>
      </div>
  ```
  - This shorthand is transformed by Angular into:
  ```html
      <ng-template [ngIf]="condition">
        <div>
          <p>Condition is true</p>
        </div>
      </ng-template>
  ```

- Explanation: Angular uses `<ng-template>` to handle the conditional rendering logic.

----------------------------------------------------------------------------------------------------

2. @ViewChild for Querying Templates:
-------------------------------------

Definition:
- @ViewChild is a decorator in Angular used to query and get a reference to a child element, directive, or component within the parent component's template.

Usage:
- @ViewChild can be used to query DOM elements, Angular components, and template references, which can then be rendered programmatically.

Example:
    ```typescript
        @Component({
          selector: 'app-root',
          template: `
            <input #inputElement type="text" />
            <button (click)="focusInput()">Focus Input</button>
          `
        })
        export class AppComponent {
          @ViewChild('inputElement') inputElement!: ElementRef;

          focusInput() {
            this.inputElement.nativeElement.focus();
          }
        }
    ```

Explanation:

- @ViewChild('inputElement') inputElement!: ElementRef: This line queries the input element and stores a reference to it.
- this.inputElement.nativeElement.focus(): This method focuses the input element when the button is clicked.

----------------------------------------------------------------------------------------------------

3. TemplateRef and ViewContainerRef:
------------------------------------

TemplateRef:
    - TemplateRef represents an embedded template within Angular.
    - Can be queried and manipulated programmatically.
    - It can be thought of as a blueprint for creating views, but it does not create or insert any DOM elements by itself.
    - We get a reference to a template using Angular's querying mechanism, such as @ViewChild.
    - It is often used with structural directives and ngTemplateOutlet to dynamically create and insert content into the DOM.

ViewContainerRef:
    - Used to create embedded views from a template reference.
    - ViewContainerRef represents a container where one or more views can be attached.
    - It provides methods for creating, inserting, and managing views dynamically at runtime.
    - `createEmbeddedView(templateRef: TemplateRef<any>, context?: any): ViewRef`
      This method creates and inserts an embedded view based on the given TemplateRef.

Querying:
    - Querying allows you to get a reference to TemplateRef instances within a component.
    - A Query (such as ViewChild) can find the TemplateRef associated to an <ng-template> element so that it can be used programmatically; for instance, to pass it to the ViewContainerRef method createEmbeddedView().

Example:
    ```typescript
      @Component({
        selector: 'app-root',
        template: `
          <ng-template #myTemplate>
            <p>This is a dynamic template!</p>
          </ng-template>
          <button (click)="addContent()">Add Content</button>
        `
      })
      export class AppComponent {
        @ViewChild('myTemplate', { read: TemplateRef }) myTemplate!: TemplateRef<any>;

        constructor(private viewContainerRef: ViewContainerRef) {}

        addContent() {
          this.viewContainerRef.createEmbeddedView(this.myTemplate);
        }
      }
    ```

Explanation:
    - The `addContent` method adds the content of `myTemplate` into the view container when the button is clicked.
    - The @ViewChild decorator is used to query and get a reference to the ng-template in the component's template.
    - `this.viewContainerRef.createEmbeddedView(this.templateRef)`: Creates an embedded view from the templateRef and inserts it into the view container when the button is clicked.

Breakdown:
    - 'myTemplate': The local template reference variable defined in the template using #myTemplate.
    - { read: TemplateRef } specifies that the reference should be read as a TemplateRef instance.
    - myTemplate!: TemplateRef<any>: Declares a class property to store the reference.

----------------------------------------------------------------------------------------------------

4. Template Variables, ngTemplateOutlet and Context:
----------------------------------------------------

Definition:
    - Template variables can be used in conjunction with `ngTemplateOutlet` to render the content defined inside `<ng-template>` tags.
    - ngTemplateOutlet is a directive that inserts an embedded view from a TemplateRef.
    - Context allows passing data into the `<ng-template>` elements.
    - Variables can be accessed using `let` and `as` declarations.

Usage: Template variables can be used in conjunction with ngTemplateOutlet to render the content defined inside ng-template tags.

Example:
    ```html
        <ng-template #templateRef let-name let-age="age">
            <p>Name: {{ name }}, Age: {{ age }}</p>
        </ng-template>

        <ng-container *ngTemplateOutlet="templateRef; context: { $implicit: 'John', age: 30 }"></ng-container>
    ```

Explanation:
    - #templateRef: Declares a template variable for the ng-template.
    - let-name: Declares a variable name that will be available within the ng-template.
    - `$implicit` is a default placeholder for the first variable.
    - Additional variables are declared with `let`.
    - `*ngTemplateOutlet="templateRef; context: { $implicit: 'John', age: 30 }"`:
        - It renders the content of `templateRef` with the provided context, making `name` & `age` available inside the template.
        - This directive instantiates an embedded view from templateRef with a context object.
        - The $implicit context variable is set to 'John', making it available as name within the template.

----------------------------------------------------------------------------------------------------

6. Comprehensive Example: Dynamic Food Menu
-------------------------------------------

Example: Basic Usage of ng-template, ng-container, ngTemplateOutlet, and Template Variables

- Component Template:

```typescript
import { Component, TemplateRef, ViewChild, ViewContainerRef } from '@angular/core';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-basic-example',
  standalone: true,
  imports: [CommonModule],
  template: `
    <ng-template #greetingTemplate let-name let-location="location">
      <div>
        <h1>Hello, {{ name }}!</h1>
        <p>Welcome to {{ location }}.</p>
      </div>
    </ng-template>

    <ng-container *ngTemplateOutlet="greetingTemplate; context: { $implicit: 'Alice', location: 'Wonderland' }"></ng-container>
  `
})
export class BasicExampleComponent {
  @ViewChild('greetingTemplate', { read: TemplateRef }) greetingTemplate!: TemplateRef<any>;
}
```

Basic Explanation

- ng-template: 
  - Defines a template that is not rendered by default.
  - In this example, `greetingTemplate` is defined to display a personalized greeting message.

- ng-container: 
  - Acts as a placeholder without adding extra elements to the DOM.
  - Used here to dynamically render the content of `greetingTemplate`.

- ngTemplateOutlet: 
  - Directive used to render the content of an `ng-template`.
  - The `context` property is used to pass dynamic data into the template.

- Template Variables: 
  - `let-name` and `let-location` are template variables used to inject data into the template.
  - `$implicit` is a special variable that allows passing a single default value.

Detailed Explanation

1. Template Definition:
   - `ng-template` with a reference variable `#greetingTemplate` is defined.
   - Template variables `let-name` and `let-location` are used to receive dynamic data.
   - The template content includes an `<h1>` for the name and a `<p>` for the location.

2. Dynamic Rendering:
   - `ng-container` is used with the `ngTemplateOutlet` directive.
   - The `context` object provides data to the template variables:
     - `$implicit` is set to `'Alice'`, corresponding to `let-name`.
     - `location` is set to `'Wonderland'`.

3. Template Variables Usage:
   - `let-name` directly receives the `$implicit` value (`'Alice'`).
   - `let-location="location"` receives the `location` value from the context object.

Conclusion




----------------------------------------------------------------------------------------------------

7. Summary:
-----------

- ng-template is used for defining reusable templates that are conditionally or programmatically rendered.
- ng-container: Acts as a placeholder without adding extra elements to the DOM.
- ngTemplateOutlet: Dynamically renders the content of an ng-template based on the provided context.
- Template Variables: Pass dynamic data into templates using let and context bindings.
- Combining `ng-template` with `ngTemplateOutlet` and `TemplateRef` offers powerful template manipulation capabilities.
- `$implicit` is a default placeholder for the first variable, additional variables are declared with `let`.

----------------------------------------------------------------------------------------------------
