
Time Stamp: 12th Jul. 2K24 - 09:39 PM..!!

Title: Observables and Observers in TypeScript

Category: Angular -> Reactive Programming -> Observables & Observers

Keywords: TypeScript, RxJS, Observable, Observer, Async Pipe

Purpose: Understanding Observables and Observers in TypeScript with comprehensive examples and detailed explanations

Dev: K.O.H..!! (Harshit Gupta)

GitHub: https://github.com/KOHTheCodeMaster/Frontend-Web-Dev/

----------------------------------------------------------------------------------------------------

Observables and Observers (RxJS) in TypeScript
----------------------------------------------

Introduction:
-------------

- This document covers the basics of Observables, including their creation, usage, best practices, and a complete step-by-step analysis with examples.

- Observables, a key part of the RxJS library, are crucial for handling asynchronous operations and event streams in Angular.
- They provide a way to emit multiple values over time, manage asynchronous data streams, and handle complex data transformations with ease.

- In Angular, Observables and Observers, powered by the RxJS library, provide a powerful mechanism for handling asynchronous data streams.
- They form the backbone of reactive programming in Angular, allowing developers to handle data that arrives at unpredictable intervals effectively.

----------------------------------------------------------------------------------------------------

Observer:
---------

- The Observer is an object that defines the handlers for the three types of notifications that an Observable can emit: next, error, and complete.
- Defining the Observer separately allows for a clearer and more organized subscription process.
- All the handler properties are optional. If we omit a handler for one of these properties, the observer ignores notifications of that type.

Observer Handlers:

- next(value):
    - A handler for each delivered value. Called zero or more times after execution starts.
    - callback function that gets called by the producer during the subscription when the producer "has" the value.
    - Limitations: It won't be called if error or complete callback functions have been called, nor after the consumer has unsubscribed.

- error(err):
    - A handler for an error notification. An error halts execution of the observable instance and unsubscribes.
    - callback function that gets called by the producer if and when it encountered a problem of any kind. The errored value will be provided through the err parameter.
    - Automatically unsubscribes.
    - Limitations: This callback can't be called more than one time, if the complete callback function have been called previously, or if the consumer has unsubscribed.

- complete():
    - A handler for the execution-complete notification. Do not expect next or error to be called again.
    - callback function that gets called by the producer if and when it has no more values to provide (by calling next callback function). This means that no error has happened.
    - Automatically unsubscribes.
    - Limitations: can't be called more than one time, if the error callback function have been called previously, or if the consumer has unsubscribed.

- Here is an example of defining an observer object separately:
```
    const observer: Observer<number> = {
      next: value => { console.log('Next value:', value); },
      error: err => { console.error('Error:', err); },
      complete: () => { console.log('Sequence complete'); }
    };
```

- Alternatively, we can create the Observer object with functions named next(), error() and complete().
- This works because JavaScript turns the function names into the property names.
```
    const observer: Observer<number> = {
      next(value) { console.log('Next value:', value); },
      error(err) { console.error('Error:', err); },
      complete() { console.log('Sequence complete'); }
    };
```

----------------------------------------------------------------------------------------------------

Defining the Subscriber Function:
---------------------------------

- The subscriber function handles the subscription logic.
- This function takes an Observer as an argument and uses its methods (next, error, complete) to emit values and handle the completion or error of the Observable stream.

- Here is an example of defining a sequenceSubscriber function:
```
    function sequenceSubscriber(observer: Observer<number>) {
      // Synchronously deliver 1, 2, 3 and then complete
      observer.next(1);
      observer.next(2);
      observer.next(3);
      observer.complete();
    }
```

Benefits of Using a Separate Function for Subscription:

- Modularity: The subscription logic is encapsulated in a separate function, making the code more modular.
- Readability: It enhances readability by clearly separating the Observable definition and subscription logic.
- Re-usability: The same subscription logic can be reused with different Observables if needed.
- Maintainability: It simplifies maintenance by allowing changes to the subscription logic without affecting the Observable creation code.

----------------------------------------------------------------------------------------------------

Observable:
-----------

Definition:
- An Observable is an object that represents a stream of values (events or data) that can emit multiple values over time.
- It is the foundation of reactive programming, allowing you to handle asynchronous data streams seamlessly.
- It can handle asynchronous operations such as HTTP requests, user inputs, and more.

Observable Lifecycle: An Observable can emit three types of notifications
    - Next: Delivers a value to the subscriber.
    - Error: Delivers an error and stops the Observable.
    - Complete: Indicates that the Observable has finished emitting values.

Naming Conventions:
- By convention, observable variables often have a $ suffix to indicate that they are streams of values.
- Example: ` const numbers$ = of(1, 2, 3); `

----------------------------------------------------------------------------------------------------

Creating Observables:
---------------------

RxJS Methods: RxJS provides various methods to create Observables.

Here are some common ones:

of(): Emits the provided values synchronously.
    - Example: ` const numbers$ = of(1, 2, 3); `

from(): Converts an array or promise into an Observable.
    - Example: ` const array$ = from([1, 2, 3]); `

interval(): Emits values at specified intervals.
    - Example: ` const interval$ = interval(1000); // Emits every second `

timer(): Emits values after a delay and then at specified intervals.
    - Example: ` const timer$ = timer(3000, 1000); // Emits after 3 seconds, then every second `


Observable Constructor:

- You can create custom Observables using the constructor:
- Example:
```
    const customObservable$ = new Observable<number>(observer => {
      observer.next(1);
      observer.next(2);
      observer.next(3);
      observer.complete();
    });
```

----------------------------------------------------------------------------------------------------

Subscription:
-------------

- Definition:
    - A `Subscription` object represents the connection between an Observable and an Observer.
    - It allows you to manage the data flow and unsubscribe when no longer needed.

- Subscribing to the Observable:
    -  We can subscribe to the observable by invoking the subscribe() method which takes in Observer as an Arg.
        - Example:
            ```
                //  Declare an observable named sequence$
                const sequence$ = new Observable<number>(observer => {
                  observer.next(1);
                  observer.next(2);
                  observer.next(3);
                  observer.complete();
                });

                const observer: Observer<number> = {
                  next: value => { console.log('Next value:', value); },
                  error: err => { console.error('Error:', err); },
                  complete: () => { console.log('Sequence complete'); }
                };

                // Execute the Observable sequence$ and print the result of each notification
                sequence$.subscribe(observer);
            ```

- Unsubscribing the observable to avoid data leaks:
    - When the consumer unsubscribes, stop listening to the changes.
    - Example:
        ```
            let subscription: Subscription = sequence$.subscribe(observer);
            subscription.unsubscribe();
        ```

Operators:
- Definition: Operators are functions that modify Observables. They can transform, filter, and combine Observables to create complex data flows.
- Common Operators: `map()`, `filter()`, `catchError()`, `mergeMap()`, `concat()`, `combineLatest()`, `tap()`,
                    `first()`, `last()`, `take(n)`, `share()`

----------------------------------------------------------------------------------------------------

Detailed Example: Observables and Observers with Angular:
---------------------------------------------------------

Scenario:
- Let's consider a scenario where we fetch user data from an API and display it in a component.
- We'll use Observables to handle the HTTP request and demonstrate the complete flow from creation to subscription and unsubscription.

Step-by-Step Implementation:

1. Creating the Service

   - user.service.ts:
     ```typescript
     import { Injectable } from '@angular/core';
     import { HttpClient } from '@angular/common/http';
     import { Observable } from 'rxjs';
     import { User } from './user.model';

     @Injectable({
       providedIn: 'root',
     })
     export class UserService {
       private apiUrl = 'https://api.example.com/users';

       constructor(private http: HttpClient) {}

       getUsers(): Observable<User[]> {
         return this.http.get<User[]>(this.apiUrl);
       }
     }
     ```

2. Defining the User Model

   - user.model.ts:
     ```typescript
     export interface User {
       id: number;
       name: string;
       email: string;
     }
     ```

3. Creating the Component

   - user-list.component.ts:
     ```typescript
     import { Component, OnInit, OnDestroy } from '@angular/core';
     import { UserService } from './user.service';
     import { User } from './user.model';
     import { Subscription } from 'rxjs';

     @Component({
       selector: 'app-user-list',
       templateUrl: './user-list.component.html',
       styleUrls: ['./user-list.component.css'],
     })
     export class UserListComponent implements OnInit, OnDestroy {
       users: User[] = [];
       private userSubscription: Subscription | null = null;

       constructor(private userService: UserService) {}

       ngOnInit() {
         this.userSubscription = this.userService.getUsers().subscribe({
           next: (data: User[]) => {
             this.users = data;
           },
           error: (err) => console.error('Error:', err),
           complete: () => console.log('Fetch complete'),
         });
       }

       ngOnDestroy() {
         if (this.userSubscription) {
           this.userSubscription.unsubscribe();
         }
       }
     }
     ```

4. Creating the Template

   - user-list.component.html:
     ```html
     <div *ngIf="users.length > 0; else noData">
       <ul>
         <li *ngFor="let user of users">{{ user.name }} - {{ user.email }}</li>
       </ul>
     </div>
     <ng-template #noData>
       <p>No users found.</p>
     </ng-template>
     ```

Detailed Explanation and Flow Analysis:

1. Service Creation:
    - The `UserService` is created with a method `getUsers` that returns an Observable of user data from an API endpoint.
    - The `HttpClient` service is used to make HTTP GET requests.

2. Model Definition:
    - The `User` interface defines the structure of the user data.

3. Component Creation:
    - The `UserListComponent` subscribes to the Observable returned by `getUsers` when the component is initialized (`ngOnInit`).
    - The subscription is stored in a class property (`userSubscription`) to allow for proper unsubscription in the `ngOnDestroy` lifecycle hook.

4. Template Creation:
    - The template uses Angular's structural directives (`*ngIf` and `*ngFor`) to display the user data.

5. Flow Analysis:
    - Initialization:
      - When `UserListComponent` is initialized, it calls `getUsers` on `UserService`.
      - This returns an Observable that is immediately subscribed to.
      - The `next` callback updates the component's `users` property with the fetched data.
    - Error Handling:
      - The `error` callback logs any errors that occur during the HTTP request.
    - Completion:
      - The `complete` callback logs when the data fetching is complete.
    - Unsubscription:
      - When the component is destroyed (`ngOnDestroy`), it checks if `userSubscription` is not null and unsubscribes to prevent memory leaks.

----------------------------------------------------------------------------------------------------

Comprehensive Example - Synchronous Data Stream using TypeScript:
-----------------------------------------------------------------

To further illustrate the concepts, let's dive into a more detailed example with both synchronous and asynchronous data streams.

Synchronous Data Stream Example:

```typescript
import { Observable } from 'rxjs';

// Create an observable that emits synchronous data
const syncObservable = new Observable<number>(observer => {
  observer.next(1);
  observer.next(2);
  observer.next(3);
  observer.complete();
});

// Define an observer
const syncObserver = {
  next: (value: number) => console.log('Synchronous value:', value),
  error: (err: any) => console.error('Synchronous error:', err),
  complete: () => console.log('Synchronous complete')
};

// Subscribe to the observable
syncObservable.subscribe(syncObserver);
```

Code-Flow Analysis:

1. Observable Creation: The `syncObservable` is created, which emits values `1`, `2`, and `3` synchronously and then completes.
2. Observer Definition: The `syncObserver` defines how to handle the emitted values, errors, and completion.
3. Subscription: The `syncObserver` subscribes to the `syncObservable`, logging each emitted value to the console.

----------------------------------------------------------------------------------------------------

Asynchronous Data Stream Example:
---------------------------------

```typescript
import { Observable } from 'rxjs';

// Create an observable that emits asynchronous data
const asyncObservable = new Observable<number>(observer => {
  setTimeout(() => observer.next(1), 1000);
  setTimeout(() => observer.next(2), 2000);
  setTimeout(() => observer.next(3), 3000);
  setTimeout(() => observer.complete(), 4000);
});

// Define an observer
const asyncObserver = {
  next: (value: number) => console.log('Asynchronous value:', value),
  error: (err: any) => console.error('Asynchronous error:', err),
  complete: () => console.log('Asynchronous complete')
};

// Subscribe to the observable
asyncObservable.subscribe(asyncObserver);
```

Code-Flow Analysis:

1. Observable Creation: The `asyncObservable` emits values `1`, `2 `, and `3` asynchronously, using `setTimeout` to delay each emission. It completes after emitting all values.
2. Observer Definition: The `asyncObserver` defines how to handle the emitted values, errors, and completion.
3. Subscription: The `asyncObserver` subscribes to the `asyncObservable`, logging each emitted value to the console with delays.

----------------------------------------------------------------------------------------------------

Async Pipe in Angular:
---------------------

- The `AsyncPipe` is a built-in Angular pipe that automatically subscribes to an Observable and returns the latest value it has emitted.
- It also handles unsubscription when the component is destroyed.

Example with AsyncPipe:

1. Service and Component (same as before):
   - No changes needed in `user.service.ts` or `user.model.ts`.

2. Template Using AsyncPipe

   - user-list.component.html:
     ```html
     <div *ngIf="userService.getUsers() | async as users; else noData">
       <ul>
         <li *ngFor="let user of users">{{ user.name }} - {{ user.email }}</li>
       </ul>
     </div>
     <ng-template #noData>
       <p>No users found.</p>
     </ng-template>
     ```

Explanation:
- The `AsyncPipe` subscribes to the Observable returned by `getUsers` and assigns the emitted value to the `users` variable.
- It handles unsubscription automatically, simplifying the component logic.

----------------------------------------------------------------------------------------------------

Summary:
--------

- Observables represent a stream of values emitted over time.
- Observers define how to handle emitted values with handlers for next, error, and complete notifications.
- Subscriber Function: Define a separate function for the subscriber logic.
- Subscriptions manage the connection between Observables and Observers.
- Operators provide powerful mechanisms to transform and manage data flows.
- Use AsyncPipe for automatic subscription and unsubscription in templates.

----------------------------------------------------------------------------------------------------
