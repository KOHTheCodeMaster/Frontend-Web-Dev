
Time Stamp: 30th May 2K24 - 05:34 PM..!!

Concept: Optional Parameters, Simulate Multiple Constructors

Dev: K.O.H..!! (Harshit Gupta)

GitHub: https://github.com/KOHTheCodeMaster/Frontend-Web-Dev/

----------------------------------------------------------------------------------------------------

1. Optional Parameters:
-----------------------

Definition:
- Optional parameters allow certain parameters to be omitted when creating an instance of a class.
- They are defined using a question mark (?) after the parameter name.

Purpose: To provide flexibility when instantiating a class, making some parameters optional and allowing for default values if they are not provided.

Syntax:
class ClassName {
    function(param1?: Type, param2?: Type) {
        // function body
    }
}

Example:
```typescript
    class Car {
        make: string;
        model: string;
        color?: string; // Optional property

        constructor(make: string, model: string, color?: string) {
            this.make = make;
            this.model = model;
            if (color) this.color = color;
        }

        displayInfo() {
            //  The ?? operator (nullish coalescing) ensures a fallback value if color is not specified.
            console.log(`Make: ${this.make}, Model: ${this.model}, Color: ${this.color ?? 'Not specified'}`);
        }
    }

    let car1 = new Car("Maruti Suzuki", "Ciaz");
    let car2 = new Car("Ford Mustang", "GT Fastback", "Black");

    car1.displayInfo(); // Output: Make: Maruti Suzuki, Model: Ciaz, Color: Not specified
    car2.displayInfo(); // Output: Make: Ford Mustang, Model: GT Fastback, Color: Red
}
```

Explanation:
- color is an optional parameter. If it's not provided, it remains undefined.
- The ?? operator (nullish coalescing) ensures a fallback value if color is not specified.


2. Multiple Constructors (Simulated Approach):
----------------------------------------------

- TypeScript doesn't directly support multiple constructors with distinct parameter lists.
- To achieve a similar effect, we can use a single constructor with optional parameters and conditional logic within it.

Example:

```typescript
    class Point {
      x: number;
      y: number;

      constructor(x: number, y?: number) { // Make y optional
        this.x = x;
        this.y = y ? y : 0; // Default y to 0 if not provided
      }
    }

    let point1 = new Point(1);      // Only x provided (y defaults to 0)
    let point2 = new Point(2, 3);   // x and y provided
```

----------------------------------------------------------------------------------------------------
