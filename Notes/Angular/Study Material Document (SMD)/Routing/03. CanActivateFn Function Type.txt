
Time Stamp: 21st Jul. 2K24 - 11:11 PM..!!

Title: CanActivateFn Auth Guard in Angular

Category: Angular -> Routing -> Guards

Keywords: CanActivateFn, Auth Guard, Angular, Route Protection, RxJS

Purpose: Comprehensive guide to `CanActivateFn` in Angular, including detailed usage, implementation, and best practices for protecting routes.

Doc-type: Study Material Document (SMD)

Dev: K.O.H..!! (Harshit Gupta)

GitHub: https://github.com/KOHTheCodeMaster/Frontend-Web-Dev/

----------------------------------------------------------------------------------------------------

CanActivateFn Auth Guard in Angular

---

Table of Contents:

1. Introduction
2. Understanding CanActivateFn
3. Usage and Syntax
4. Use-Cases
5. Limitations
6. Best Practices
7. Comprehensive Example
8. Step-by-Step Flow Analysis
9. Real-world Application Example
10. Detailed Step-by-Step Demonstration
11. Conclusion
12. Summary

---

1. Introduction:

The `CanActivateFn` in Angular is a function type alias used as a guard to protect routes. It is designed to determine if a route can be activated based on specific conditions, such as user authentication or permissions. This guide covers everything you need to know to implement and master `CanActivateFn` for route protection in Angular applications.

---

2. Understanding CanActivateFn:

- The `CanActivateFn` function type alias is a replacement for the deprecated `CanActivate` interface.
- It allows the implementation of route guards using functions that can return `boolean`, `UrlTree`, `Observable<boolean | UrlTree>`, or `Promise<boolean | UrlTree>`.
- These guards help control access to routes based on logic such as user authentication or authorization.

---

3. Usage and Syntax:

Basic Syntax:

The basic syntax for defining a `CanActivateFn` function is:

```typescript
const canActivate: CanActivateFn = (route: ActivatedRouteSnapshot, state: RouterStateSnapshot) => {
  // Logic here
  return true; // or false, UrlTree, Observable, Promise
};
```

Example:

A simple implementation of `CanActivateFn` to check if a user is authenticated:

```typescript
import { inject } from '@angular/core';
import { Router } from '@angular/router';
import { AuthService } from './auth.service';

const canActivate: CanActivateFn = (route: ActivatedRouteSnapshot, state: RouterStateSnapshot) => {
  const authService = inject(AuthService);
  const router = inject(Router);
  
  if (authService.isLoggedIn()) {
    return true;
  } else {
    return router.createUrlTree(['/login']);
  }
};
```

---

4. Use-Cases:

- User Authentication: Protect routes that require users to be logged in.
- User Authorization: Restrict access to certain routes based on user roles or permissions.
- Conditional Navigation: Implement conditional logic for route activation, such as feature flags or experimental features.
- Data Integrity: Ensure certain data is loaded or conditions are met before allowing route activation.

---

5. Limitations:

- Complex Logic: While `CanActivateFn` is powerful, complex logic might make the guard difficult to maintain.
- Performance: Long-running or synchronous operations within guards can affect route activation performance.
- Testing: Testing guards can be tricky, especially when dealing with asynchronous operations or dependency injection.

---

6. Best Practices:

- Keep It Simple: Ensure the guard logic is simple and easy to understand.
- Handle Errors Gracefully: Provide clear navigation paths or error messages for users when access is denied.
- Use Dependency Injection: Leverage Angularâ€™s `inject` function to access services within the guard.
- Combine Guards: Use multiple guards for different conditions rather than combining all logic into a single guard.
- Optimize Performance: Avoid long-running synchronous operations within the guard logic.

---

7. Comprehensive Example:

Scenario: Protecting a Dashboard Route

Step 1: Create AuthService

```typescript
import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private loggedInUser$ = new BehaviorSubject<boolean>(false);

  isLoggedIn(): boolean {
    return this.loggedInUser$.value;
  }

  login() {
    this.loggedInUser$.next(true);
  }

  logout() {
    this.loggedInUser$.next(false);
  }
}
```

Step 2: Define CanActivateFn

```typescript
import { inject } from '@angular/core';
import { Router } from '@angular/router';
import { AuthService } from './auth.service';

const canActivate: CanActivateFn = (route: ActivatedRouteSnapshot, state: RouterStateSnapshot) => {
  const authService = inject(AuthService);
  const router = inject(Router);

  if (authService.isLoggedIn()) {
    return true;
  } else {
    return router.createUrlTree(['/login']);
  }
};
```

Step 3: Apply Guard to Route

```typescript
import { Routes } from '@angular/router';
import { DashboardComponent } from './dashboard/dashboard.component';

const routes: Routes = [
  { path: 'dashboard', component: DashboardComponent, canActivate: [canActivate] }
];
```

Step 4: User Service and Component

Create a simple user service and component to simulate login/logout:

```typescript
import { Component } from '@angular/core';
import { AuthService } from './auth.service';

@Component({
  selector: 'app-login',
  template: `
    <button (click)="login()">Login</button>
    <button (click)="logout()">Logout</button>
  `
})
export class LoginComponent {
  constructor(private authService: AuthService) {}

  login() {
    this.authService.login();
  }

  logout() {
    this.authService.logout();
  }
}
```

---

8. Step-by-Step Flow Analysis:

1. Route Navigation Attempt: User tries to navigate to the `dashboard` route.
2. Guard Execution: The `canActivate` function is executed.
3. Dependency Injection: `AuthService` and `Router` are injected using the `inject` function.
4. Authentication Check: The guard checks if the user is logged in by calling `authService.isLoggedIn()`.
5. Decision Making:
   - If the user is logged in, navigation continues.
   - If the user is not logged in, the guard returns a `UrlTree` to redirect to the `/login` route.
6. Navigation Outcome: Based on the guard's return value, Angular either proceeds with the navigation or redirects to the login page.

---

9. Real-world Application Example:

Consider an e-commerce application where certain routes, like the checkout page, require the user to be authenticated.

Step 1: AuthService

```typescript
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private loggedIn = new BehaviorSubject<boolean>(false);
  loggedIn$ = this.loggedIn.asObservable();

  login() {
    this.loggedIn.next(true);
  }

  logout() {
    this.loggedIn.next(false);
  }

  isLoggedIn() {
    return this.loggedIn.value;
  }
}
```

Step 2: CanActivateFn Implementation

```typescript
import { inject } from '@angular/core';
import { Router } from '@angular/router';
import { AuthService } from './auth.service';

const canActivateCheckout: CanActivateFn = (route: ActivatedRouteSnapshot, state: RouterStateSnapshot) => {
  const authService = inject(AuthService);
  const router = inject(Router);

  if (authService.isLoggedIn()) {
    return true;
  } else {
    return router.createUrlTree(['/login']);
  }
};
```

Step 3: Apply Guard to Routes

```typescript
import { Routes } from '@angular/router';
import { CheckoutComponent } from './checkout/checkout.component';

const routes: Routes = [
  { path: 'checkout', component: CheckoutComponent, canActivate: [canActivateCheckout] }
];
```

Step 4: Login Component

```typescript
import { Component } from '@angular/core';
import { AuthService } from './auth.service';

@Component({
  selector: 'app-login',
  template: `
    <button (click)="login()">Login</button>
    <button (click)="logout()">Logout</button>
  `
})
export class LoginComponent {
  constructor(private authService: AuthService) {}

  login() {
    this.authService.login();
  }

  logout() {
    this.authService.logout();
  }
}
```

---

10. Detailed Step-by-Step Demonstration:

1. Component Initialization: The `LoginComponent` initializes and provides buttons to login and logout.
2. Route Guard Check: When the user attempts to navigate to the `checkout` route, the `canActivateCheckout` function is executed.
3. Authentication Validation:
   - The `AuthService` checks the authentication status.
   - If authenticated, the user is allowed to proceed.
   - If not authenticated, the user is redirected to the login page.
4. User Interaction: The user can click login to set the authentication status and retry accessing the checkout route.

---

11. Conclusion:

The `CanActivateFn` in Angular is a powerful tool for protecting routes and ensuring that users meet certain

 conditions before accessing specific parts of an application. By leveraging the flexibility of `CanActivateFn`, we can implement complex authentication and authorization logic, improve security, and provide a better user experience.

---

12. Summary:

- Overview: `CanActivateFn` is used to guard routes in Angular based on specific conditions.
- Usage: Simplifies route protection with flexible return types (`boolean`, `UrlTree`, `Observable`, `Promise`).
- Use-Cases: Ideal for user authentication, authorization, conditional navigation, and data integrity.
- Limitations: Complex logic, performance concerns, and testing challenges.
- Best Practices: Keep logic simple, handle errors gracefully, use dependency injection, combine guards, and optimize performance.
- Comprehensive Example: Protecting a dashboard route with detailed step-by-step flow analysis and real-world application example.

By mastering `CanActivateFn`, we can ensure our Angular applications are secure, efficient, and user-friendly.

----------------------------------------------------------------------------------------------------
