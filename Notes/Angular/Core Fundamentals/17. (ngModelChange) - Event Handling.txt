
Time Stamp: 23rd Jun 2K24 - 02:59 PM..!!

Title: (ngModelChange) - Event Handling

Category: Web Development -> Angular -> Data Binding

Keywords: Angular, ngModelChange, Two-Way Data Binding, NgModel, Event Handling

Dev: K.O.H..!! (Harshit Gupta)

GitHub: https://github.com/KOHTheCodeMaster/Frontend-Web-Dev/

----------------------------------------------------------------------------------------------------

Understanding ngModel and ngModelChange:

- ngModel:
    - ngModel is a directive in Angular that allows for two-way data binding.
    - This means that it binds an input, select, or textarea element to a property on your component and keeps both in sync.
- ngModelChange:
    - ngModelChange is an event that is emitted whenever the value bound to ngModel changes.
    - This allows you to respond to these changes with a custom function.

Case 1: [(ngModel)] with (ngModelChange)
----------------------------------------

- Two-Way Data Binding.
- (ngModelChange) is typically used alongside [(ngModel)] for two-way data binding where you want to capture and react to changes in the data.
- Code: ` <input type="text" [(ngModel)]="name1" (ngModelChange)="updateName1($event)"> `
- Explanation: This setup binds the input value to the name1 property in the component, and also listens for changes to update the name1 property using the updateName1 method.

Case 2: [ngModel] with (ngModelChange)
--------------------------------------

- One-Way Data Binding with Custom Change Handling.
- [ngModel] with (ngModelChange) can be used for one-way data binding where you still want to handle changes.
- Code: ` <input type="text" [ngModel]="name2" (ngModelChange)="updateName2($event)"> `
- Explanation: This setup binds the input value to the name2 property for display but does not update it automatically. Instead, it uses the updateName2 method to handle changes.

Case 3:`(ngModelChange)` without `[ngModel]` or `[(ngModel)]` -> INVALID & NOT ALLOWED
--------------------------------------------------------------------------------------

- [ngModel] directive is mandatorily required before using (ngModelChange).
- Direct usage of `(ngModelChange)` without `[ngModel]` or `[(ngModel)]` is INVALID & not allowed.
- Code: ` <input type="text" (ngModelChange)="updateName3($event)"> `      // [INVALID & NOT ALLOWED]
- Explanation:
    - The ngModelChange event is emitted by the ngModel directive whenever the bound value changes.
    - If ngModel is not present, there's no established data binding, and the directive has no context or value to track changes for.

Difference Between (ngModelChange) vs (change):
-----------------------------------------------

- (ngModelChange): This is specific to Angular and is triggered whenever the value of the `ngModel` directive changes. It is used for two-way data binding.

- (change): This is a standard DOM event that is triggered when the element loses focus and its value has changed.

[(ngModel)] vs [ngModel]:
-------------------------

- [(ngModel)]: This is used for two-way data binding. It binds the input element to a property on the component and keeps both in sync.
- ` <input [(ngModel)]="propertyName"> `

- [ngModel]: This is used for one-way data binding. It binds the input element to a property on the component but does not update the property if the input value changes.
- ` <input [ngModel]="propertyName"> `

Summary:
--------

- ngModel: Used for two-way data binding.
- ngModelChange: Event emitted when the value of the `ngModel` directive changes.

----------------------------------------------------------------------------------------------------
