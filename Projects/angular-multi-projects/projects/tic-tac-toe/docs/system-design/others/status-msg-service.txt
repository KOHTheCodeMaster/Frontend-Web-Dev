
Simplified Doc: StatusMsgService

---

Purpose:
--------

- The `StatusMsgService` handles dynamic game status messages based on the game's current state and active player.
- This service ensures that the game status is always reflected in real-time and provides a way for other components to access and display this information.

---

Introduction: StatusMsgService
------------------------------

What is it?
`StatusMsgService` is a service that handles the game's status messages, such as displaying "Player's Turn," "Tie," or "Winner." It keeps the message up-to-date based on the current state of the game.

Why is it Needed?
In a game, players need to know what's happening — whether it's their turn, if the game ended in a tie, or if someone won. This service makes sure the status message (`strStatusMsg`) is always accurate and displayed in real-time.

How Does it Work?
1. Listening for Changes:
   It subscribes to changes in the game’s state, using `gameStateService.getCurrentPlayer$()` for the current player and `gameStateService.getGameStatus$()` for the game status.

2. Updating the Message:
   When the game state or current player changes, the service updates the status message by calling the `updateStatusMsg()` method, which checks the game status and updates the `strStatusMsg` accordingly.

3. Sharing the Message:
   Other components can get this message by calling `getStrStatusMsg()`, which returns the current status message.

---

Step-by-Step Flow
-----------------

---

1. Overview
- Dependencies:
  - `GameStateService`: Provides the current player and game status.
  - `Player` and `GameStatus`: Models and enums for player data and game states.

```ts
import { Injectable } from '@angular/core';
import { Player } from '../shared/model/player.model';
import { GameStatus } from '../shared/model/game-status.enum';
import { GameStateService } from './game-state.service';
```

---

2. Service Registration

The `@Injectable` decorator makes the service available app-wide as a singleton.

```ts
@Injectable({
  providedIn: 'root',
})
```

---

3. Dependency Injection

- Injected Dependency:
  The `GameStateService` is injected into the constructor.
- Why?
  To access the latest game state (`gameStatus$`) and current player (`currentPlayer$`).

```ts
constructor(private gameStateService: GameStateService) { }
```

---

4. Variable Declaration

- `strStatusMsg`:
  Holds the current game status message.
  Initialization: Happens in the constructor.

```ts
private strStatusMsg!: string;
```

- Why `!`?
  The `!` operator tells TypeScript that the variable will be initialized before use.

---

5. Constructor Initialization

- Tasks:
  1. Set the initial status message.
  2. Set up real-time updates.

```ts
constructor(private gameStateService: GameStateService) {
  this.initializeStrStatusMsg();   // Initialize the first message
  this.initializeSubscriptions(); // Handle dynamic updates
}
```

---

6. Initializing the Status Message

Purpose: Fetches the initial player and game status, then sets the message.

```ts
private initializeStrStatusMsg() {
  const initialPlayer = this.gameStateService.getCurrentPlayer$().getValue();
  const initialGameStatus = this.gameStateService.getGameStatus$().getValue();
  this.updateStatusMsg(initialGameStatus, initialPlayer);
}
```

---

7. Dynamic Updates

Purpose: Updates the message when the game state or player changes.

```ts
private initializeSubscriptions() {
  this.gameStateService.getCurrentPlayer$().subscribe((player: Player) => {
    const gameStatus = this.gameStateService.getGameStatus$().getValue();
    this.updateStatusMsg(gameStatus, player);
  });

  this.gameStateService.getGameStatus$().subscribe((gameStatus: GameStatus) => {
    const currentPlayer = this.gameStateService.getCurrentPlayer$().getValue();
    this.updateStatusMsg(gameStatus, currentPlayer);
  });
}
```

---

8. Updating the Message

Purpose: Creates the status message based on the current game status and active player.

```ts
updateStatusMsg(gameStatus: GameStatus, currentPlayer: Player) {
  const statusMessages = {
    [GameStatus.IN_PROGRESS]: `Turn: ${currentPlayer.name} (${currentPlayer.symbol})`,
    [GameStatus.TIE]: "It's a Tie!",
    [GameStatus.WIN]: `Winner: ${currentPlayer.name} (${currentPlayer.symbol})`,
  };
  this.strStatusMsg = statusMessages[gameStatus] || this.strStatusMsg;
}
```

---

9. Accessing the Status Message

Purpose: Exposes the message for other components to use.

```ts
getStrStatusMsg(): string {
  return this.strStatusMsg;
}
```

---

Key Points Recap

1. Dependency: Inject `GameStateService` to fetch the latest game and player data.
2. Variable: `strStatusMsg` holds the current message.
3. Constructor:
   - Initializes the message (`initializeStrStatusMsg`).
   - Sets up dynamic updates (`initializeSubscriptions`).
4. Message Update: `updateStatusMsg` creates dynamic messages based on game status and player.
5. Access: `getStrStatusMsg()` provides the message for other components.

---

Why This Approach?

- Simplicity: Centralizes message logic in one service.
- Reusability: Uses shared game state logic (`GameStateService`).
- Flexibility: Easily scalable for new game states or additional logic.
