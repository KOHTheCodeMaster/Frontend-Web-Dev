Tic Tac Toe: Component Design

---

Global States:
The global states are managed in the root GameComponent to maintain synchronization across child components.

1. gameStatus: Represents the current state of the game.

Possible values:
- "ongoing": The game is active.
- "win": A player has won.
- "tie": The game ended in a tie.


2. currentPlayer: Tracks which player's turn it is.

Possible values:
- Player 1 instance
- Player 2 instance

---


Component Structure:

1. GameComponent (Root Component):
----------------------------------

Responsibilities:
- Manages global states: gameStatus, currentPlayer.
- Provides methods for game state management (e.g., switchPlayer, restart, reset).

Key Methods:

1. restart(): Resets the game board and toggles the starting player.

Triggered By:
- User clicking the restart button: Direct UI interaction.
- User clicking the reset button: invoked by reset() method after resetting the scores.

Actions:
- Clear board in BoardComponent.
- gameStatus = "ongoing"
- Toggle currentPlayer ("P1" ↔ "P2").


2. reset(): Completely resets the game, including scores.

Triggered By: User clicking the reset button.

Actions:
- Reset scores in ScoreboardComponent.
- Calls restart() to reset the game states.


3. switchPlayer(): Toggles the current player.

Actions:
- Toggles currentPlayer between "P1" and "P2".

---

2. BoardComponent
-----------------

Responsibilities:
- Manages the state of the game board (3x3 grid).
- Handles cell updates and checks for win/tie conditions.

Key Methods:

1. cellClick(row, col): Handles cell click events.

Triggered By: User clicking on a cell.

Actions:
- Draws the current player’s symbol on the clicked cell.
- Calls checkWin() to evaluate the game state.
- Calls checkTie() to determine if the game is tied.
- Calls chanceToggle() to switch the current player.


2. checkWin(): Checks for a winning combination.

Triggered By: cellClick() after each move.

Actions:
- Evaluates all possible winning combinations (rows, columns, diagonals).
- If a winning combination is found, updates gameStatus = "win".


3. checkTie(): Checks for a tie condition.

Triggered By: cellClick() after each move.

Actions:
- Checks If all cells are occupied and no winner, updates gameStatus = "tie".


3. CellComponent
-----------------

Responsibilities:
- Represents a single cell in the grid.
- Handles individual cell updates.

Key Methods:

renderSymbol(playerSymbol): Draws the symbol ("X" or "O") based on the currentPlayer.

Triggered By: cellClick() in BoardComponent.

Actions:
- Displays the currentPlayer's symbol in the cell.


---

4. ScoreboardComponent
----------------------

Responsibilities:
- Tracks and displays scores for both players.
- Highlights the current player’s turn.
- Highlights the winning player.
- Provides a reset option for scores.
- Updates scores based on game outcomes.

Key Methods:

updateWinner(winner): Increment the score & Highlight the winning player when gameStatus = "win".

Triggered By: State change in gameStatus = "win"

Actions:
- Actively listens for gameStatus changes.
- Increment the score for the current player (winner)
- Highlight the winning player on the scoreboard.


resetScore(): Resets all scores to zero.

Triggered By: User clicking the reset button.

Actions:
- Resets all the scores to zero.


indicateCurrentPlayerTurn(): Highlights the current player's turn on the scoreboard.

Triggered By: State change in `currentPlayer`.

Actions:
- Actively listens for `currentPlayer` changes.
- Update the UI to reflect the current player's turn.



5. StatusMsgComponent
----------------------

Responsibilities:
- Displays the current game status message.
- Updates based on gameStatus and currentPlayer.

Possible Values:
- "Turn: Player 1 (X)"
- "Turn: Player 2 (O)"
- "Winner: Player 1 (X)"
- "Winner: Player 2 (O)"
- "It's a Tie!"

Key Methods:

updateStatusMessage(): Updates the displayed message based on gameStatus and currentPlayer.

Triggered By: State change in gameStatus or currentPlayer.

Actions:
- Actively listens for changes in gameStatus and currentPlayer.
- Dynamically updates the displayed message based on the `gameStatus` & `currentPlayer` states.
- Reflects the current player's turn or the game outcome based on gameStatus.



