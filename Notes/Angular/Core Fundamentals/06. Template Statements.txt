
Time Stamp: 8th Jun 2K24 - 06:40 PM..!!

Title: Template Statements

Dev: K.O.H..!! (Harshit Gupta)

GitHub: https://github.com/KOHTheCodeMaster/Frontend-Web-Dev/

----------------------------------------------------------------------------------------------------

1. Definition and Usage:
------------------------

- Template statements are used to respond to user events within the template.
- Template statements in Angular are methods or properties that you can use in your HTML template to respond to user events.
- These statements are part of the component's template and allow you to perform operations such as
  handling user inputs, interacting with component data, and controlling the flow of data within your application.
- Commonly used within event bindings to call component methods or execute simple expressions.
- Example: `<button (click)="deleteItem()">Delete Item</button>`

2. Syntax:
----------

- Template statements use a JavaScript-like syntax but with some limitations.
- However, the parser for template statements differs from the parser for template expressions.
- Syntax: `(event)="statement"`
- Example: `<input (input)="itemName = $event.target.value">`
- Template Statements parser specifically supports both basic assignment `=` and chaining expressions with semicolons `;`.
- The following JavaScript and template expression syntax is not allowed:
    - `new` keyword
    - Increment and decrement operators (`++` and `--`)
    - Operator assignment (`+=`, `-=`)
    - Bitwise operators (`|`, `&`)
    - Pipe operator (`|`)

3. Statement Context:
---------------------

- Template statements execute in the context of the component instance.
- Can refer to the component's properties and methods.
- Can also refer to template variables like `$event` and template reference variables.
- Example:
    ```html
        <button (click)="onSave($event)">Save</button>
        ...
          @for (item of items; track item) {
            <button type="button" (click)="deleteItem(item)">{{ item.name }}</button>
          }
        ...
        <form #itemForm (ngSubmit)="onSubmit(itemForm)"> ... </form>
    ```
- Note:
    - Template context names take precedence over component context names
    - In the preceding deleteItem(item), the item is the template input variable, not the component's item property.

4. Best Practices:
------------------

- Keep template statements simple and declarative.
- Avoid complex logic within templates to maintain readability and separation of concerns.
- Use component methods to handle complex operations.

5. Template Expressions vs. Template Statements:
------------------------------------------------

1. Template Expressions:
   - Used to display data in the view.
   - Enclosed within double curly braces `{{ }}`.
   - Evaluate to a value and can include properties, methods, and literals.
   - Example: `{{ item.name }}`

2. Template Statements:
   - Used to handle events and execute logic.
   - Placed within event binding parentheses `( )`.
   - Can call methods or use simple expressions but must remain simple.
   - Example: `(click)="deleteItem(item)"`

6. Summary:
-----------

- Template Statements: Methods or properties used in HTML to respond to user events, enabling dynamic interactions.

- Syntax: Use event binding syntax `(event)="statement"`. Avoid complex logic directly in templates.

- Context: Statements execute in the context of the component instance, allowing access to component properties and methods.

- Best Practices: Keep statements simple, use component methods for complex logic, and maintain readability.

- Expressions vs. Statements: Expressions display data, while statements handle events and logic.

----------------------------------------------------------------------------------------------------
