
Time Stamp: 18th Jun 2K24 - 10:59 AM..!!

Title: Structural Directives - ngFor

Category: Web Development -> Angular -> Structural Directives

Keywords: Angular, Structural Directives, NgFor, trackBy

Dev: K.O.H..!! (Harshit Gupta)

GitHub: https://github.com/KOHTheCodeMaster/Frontend-Web-Dev/

----------------------------------------------------------------------------------------------------

1. NgFor Structural Directive:
------------------------------

Listing items with NgFor:
  - Use NgFor to iterate over a list and render items.
  - Import `NgFor` from `@angular/common` in your component module.

Basic Example: ```html <div *ngFor="let item of items">{{ item.name }}</div> ```
  - Renders each `item` in the `items` array and displays its `name`.

Using with Component: Repeat a custom component for each item.
  ```html <app-item-detail *ngFor="let item of items" [item]="item"></app-item-detail> ```

Getting Index: Access the index of each item in the loop.
  ```html <div *ngFor="let item of items; let i = index">{{ i + 1 }} - {{ item.name }}</div> ```

Tracking Changes (trackBy):
  - Improve performance by tracking items using a unique identifier.
  - Define a method in the component:
  ```typescript
       trackByItems(index: number, item: Item): number {
         return item.id; // Use a unique identifier like id
       }
  ```
  - Use it in the template:
  ```html
       <div *ngFor="let item of items; trackBy: trackByItems">
         ({{ item.id }}) {{ item.name }}
       </div>
  ```

----------------------------------------------------------------------------------------------------

2. Difference between with/without trackBy:
-------------------------------------------

Without trackBy:
  - Angular re-renders the entire list of transactions on each change, leading to inefficient DOM manipulation.
  - Clicking the "Refresh" button re-initializes the transactions, causing the entire list to be re-rendered.

With trackBy:
  - Using `trackBy`, Angular optimizes DOM rendering by re-rendering only the affected items when changes occur.
  - Clicking the "Refresh" button re-initializes the transactions, resulting in only the newly added items being re-rendered.

Demonstration:
    - Inspecting the browser's developer tools after clicking "Refresh" in both sections can visually demonstrate the difference in DOM manipulation between the two approaches.

----------------------------------------------------------------------------------------------------

3. Detailed Example:
--------------------

```demo-ng-for.component.ts

    import {Component} from '@angular/core';
    import {NgFor, NgStyle} from '@angular/common';

    @Component({
        selector: 'app-demo-ng-for',
        standalone: true,
        imports: [NgFor, NgStyle],
        templateUrl: './demo-ng-for.component.html',
        styleUrl: './demo-ng-for.component.css'
    })
    export class DemoNgForComponent {

        transactions: Transaction[] = [
            {id: 1, date: '2024-06-11', description: 'Payment 1', amount: 100},
            {id: 2, date: '2024-06-12', description: 'Payment 2', amount: 150},
            {id: 3, date: '2024-06-13', description: 'Payment 3', amount: 200}
        ];

        trackByTransactionId(index: number, transaction: Transaction): number {
            return transaction.id;
        }

        refreshTransactions() {
            // Re-initialize the transactions list
            this.transactions = [
                {id: 1, date: '2024-06-11', description: 'Payment 1', amount: 100},
                {id: 2, date: '2024-06-12', description: 'Payment 2', amount: 150},
                {id: 3, date: '2024-06-13', description: 'Payment 3', amount: 200},
                {id: 4, date: '2024-06-14', description: 'Payment 4', amount: 120},
                {id: 5, date: '2024-06-15', description: 'Payment 5', amount: 180}
            ];
        }

        removeTransaction(index: number) {
            this.transactions.splice(index, 1);
        }
    }


    interface Transaction {
        id: number;
        date: string;
        amount: number;
        description: string;
    }

```

```demo-ng-for.component.html

    <h3>Structural Directive - ngFor</h3>
    <div>

      <!--  ngFor -->
      <div class="transaction-list" *ngFor="let transaction of transactions; let i = index; trackBy trackByTransactionId">
        <span class="transaction-item">[{{ transaction.id }}] - {{ transaction.date }} - {{ transaction.description }}</span>
      </div>


      <!--  Without trackBy: Full DOM Re-rendering  -->
      <div class="transaction-list">
        <h2>Transaction List - without trackBy</h2>
        <div *ngFor="let transaction of transactions; let i = index"
             class="transaction-item">
          {{ transaction.id }} - {{ transaction.description }} - ${{ transaction.amount }}
          <button (click)="removeTransaction(i)">-</button>
        </div>
        <button (click)="refreshTransactions()">Refresh</button>
      </div>


      <!--  With trackBy: Optimized DOM Rendering - Inspect & Check DOM Changes After Clicking "Refresh" Button  -->
      <div class="transaction-list">
        <h2>Transaction List - with trackBy</h2>
        <div *ngFor="let transaction of transactions; let i = index; trackBy: trackByTransactionId"
             class="transaction-item">
          {{ transaction.id }} - {{ transaction.description }} - ${{ transaction.amount }}
          <button (click)="removeTransaction(i)">-</button>
        </div>
        <button (click)="refreshTransactions()">Refresh</button>
      </div>

    </div>

```

```demo-ng-for.component.css
    .transaction-list {
      border: 1px solid #ccc;
      padding: 10px;
      max-width: 400px;
    }

    .transaction-item {
      border-bottom: 1px solid #ddd;
      padding: 5px;
      transition: background-color 0.3s ease;
    }
```

Explanation of `ngFor` with and without `trackBy` Demonstration:

- This code demonstrates the `ngFor` structural directive in Angular with and without the `trackBy` optimization technique.
- It showcases the impact of `trackBy` on DOM manipulation efficiency when dealing with data changes.

Components:
- The code defines a `DemoNgForComponent` with:
    - An array of `Transaction` objects representing transaction data.
    - A `trackByTransactionId` function used with `trackBy` in `ngFor`.
    - Methods to refresh transactions (adding new ones) and remove transactions.

Templates (`demo-ng-for.component.html`):
    The template showcases three sections:
    1. Structural Directive - ngFor: This section serves as a basic introduction to `ngFor`.

    2. Transaction List - without trackBy: This section demonstrates `ngFor` without `trackBy`.
        - A `*ngFor` directive iterates through `transactions`.
        - Each transaction is displayed with its details.
        - A button allows removing a transaction by its index.
        - A "Refresh" button triggers the `refreshTransactions` method, adding new transactions to the list.

    3. Transaction List - with trackBy: This section highlights the optimized approach using `trackBy`:
        - It's similar to the previous section, but incorporates `trackBy: trackByTransactionId` in `*ngFor`.
        - The `trackByTransactionId` function returns the `id` of each transaction.
        - This allows Angular to identify changes based on unique IDs instead of the entire object reference.

Explanation:
    Full DOM Re-rendering Without `trackBy`:
    - When you click the "Refresh" button in the "without trackBy" section, Angular typically re-renders the entire list of transactions.
    - This is because it doesn't have a mechanism to efficiently track which specific items have changed.
    - Even if only a few new transactions are added, the entire DOM structure for the list might be recreated, leading to performance overhead for large datasets.

    Optimized DOM Rendering With `trackBy`:
    - When you click "Refresh", Angular uses the `id` of each transaction to determine which items have actually changed.
    - It then only re-renders the elements for the newly added transactions, minimizing unnecessary DOM manipulation.
    - This approach significantly improves performance, especially when dealing with frequently updated or large datasets.

----------------------------------------------------------------------------------------------------

4. Why Use `trackBy` in Angular's ngFor?
----------------------------------------

Optimizes Rendering:
  - Without `trackBy`, Angular re-renders the entire list when there's a change, leading to performance overhead, especially with large lists.
  - `trackBy` allows Angular to update only the DOM elements that have changed, based on the unique identifiers returned by the `trackBy` function.

Preserves User Input and State:
  - Maintains user input focus and scroll position for unchanged items during updates.
  - Improves overall user experience by reducing unexpected UI shifts caused by list updates.

Reduces DOM Manipulations:
  - By associating each list item with a stable identifier (e.g., item ID), `trackBy` minimizes unnecessary DOM manipulations.
  - Only items whose identifiers have changed are re-rendered, optimizing application performance.

Stable and Predictable Updates:
  - Ensures predictable updates to the UI, enhancing maintainability and readability of Angular components.
  - Developers can confidently manage and debug UI updates related to lists with `trackBy` in place.

Best Practices:
  - Choose a unique and stable identifier for `trackBy`, typically an item's ID or another immutable property.
  - Avoid using indexes (`index`) as the identifier unless the list is static, as changing indexes can cause unexpected UI behavior.
  - Implementing `trackBy` significantly improves performance and user experience by minimizing unnecessary DOM updates and preserving UI state during list changes. 
  - It's a crucial optimization technique for applications handling dynamic data and frequent updates to lists.

----------------------------------------------------------------------------------------------------

5. Summary:
-----------

- `ngFor` is a powerful directive for iterating over collections in Angular templates.
- Use `let item of items` to define iteration.
- Access index with `*ngFor="let item of items; let i=index"`.
- `trackBy` is an optional property used with `ngFor` to optimize DOM updates.
- It provides a unique identifier for each item, allowing Angular to track changes efficiently.
- Improve performance with `trackBy` for efficient re-rendering, especially for dynamic and large lists.

----------------------------------------------------------------------------------------------------
