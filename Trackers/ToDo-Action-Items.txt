
Time Stamp: 21st Jul 2K24 - 10:34 AM..!!

Title: To-Do Action Items

Category: General -> Task Management -> Pending Action Items

Keywords: To-Do, Action Items, Pending, Tasks, SMD

Purpose: Tracking the Pending To-Do Action Items and Tasks to be Completed.

Dev: K.O.H..!! (Harshit Gupta)

GitHub: https://github.com/KOHTheCodeMaster/Frontend-Web-Dev/

----------------------------------------------------------------------------------------------------

1. SMD on 'Comma Operator in TypeScript' is PENDING!
----------------------------------------------------

Created Time Stamp:   21st Jul 2K24 - 10:35 AM
Resolved Time Stamp:  N/A

ToDo: Create a detailed Study Material Document (SMD) on the Comma Operator in TypeScript.
Status: OPEN

Description:
1. The SMD should provide a clear explanation of the comma operator in TypeScript.
2. It should include examples that demonstrate the use of the comma operator in different contexts.
3. The document should highlight the benefits and potential pitfalls of using the comma operator.
4. Practical scenarios or code snippets should be used to illustrate the concepts effectively.

Notes for Reference:

Example: - Use below example for reference in the SMD on 'Comma Operator in TypeScript'

```typescript
    // Check if the user is logged in - optimized implementation - Using !!, || & comma operators.
    checkLogin(): Observable<boolean> {
        /*
            The loggedInUser$ observable emits the user object when the user logs in.
            Using comma operator, the map operator first checks if the user is logged in, and returns true.
            If the user is not logged in, the map operator navigates to the login page and returns false.
            Note:
            - !!user returns true if user is not null or undefined, otherwise it returns false.
            - The || operator returns the first truthy value or the last value if no truthy value is found.
            - The comma operator evaluates each expression from left to right and returns the value of the last expression.
         */
        return this.authService.loggedInUser$.pipe(
            map(user => !!user || (this.router.navigate(['/login']), false))
        );
    }
`

- Explanation of the checkLogin function:
1. The checkLogin function returns an Observable<boolean>.
2. It uses the loggedInUser$ observable from the authService.
3. The map operator is used to transform the emitted user value.
4. The expression !!user converts the user object to a boolean value.
5. If the user is falsy (null, undefined, etc.), it navigates to the login page.
6. The comma operator is used to return false if the user is falsy.
7. The final result is a boolean indicating whether the user is logged in.

- Explanation of the usage of the comma operator in the expression ` !!user || (this.router.navigate(['/login']), false) ` with emphasis on !!, ||, and , operators:
1. The expression !!user converts the user object to a boolean value.
2. If the user is truthy (not null or undefined), the logical OR operator (||) short-circuits and returns true.
3. If the user is falsy, the logical OR operator evaluates the second part of the expression.
4. The comma operator (,) is used to separate multiple expressions within a single statement.
5. In this case, the comma operator is used to execute two expressions sequentially.
6. The first expression is this.router.navigate(['/login']), which navigates to the login page.
7. The second expression is false, which is the value returned if the user is falsy.
8. The overall result of the expression is false, indicating that the user is not logged in.
9. This approach combines navigation logic with the check for a truthy user value.
10. It ensures that the user is redirected to the login page if they are not logged in.

----------------------------------------------------------------------------------------------------

2. SMD on 'Child Container Overflow in CSS' is PENDING!

Created Time Stamp:   28th Aug 2K24 - 12:11 PM
Resolved Time Stamp:  N/A

ToDo: Create a detailed Study Material Document (SMD) on Child Container Overflow in CSS.
Status: OPEN

Description:
1. The SMD should explain the concept of child container overflow in CSS layouts.
2. It should cover the causes of overflow, the impact on layout, and best practices to manage overflow effectively.
3. Include real-world analogies, examples, and practical tips for handling child container overflow.
4. Address common issues related to child container overflow and provide solutions to mitigate them.

---

Notes for Reference:
- Use the real-world analogy of a garden with flower beds and plants to explain child container overflow.
- Include examples of layout issues caused by child container overflow and how they can be resolved.
- Provide detailed explanations of the overflow property, dimensions, and alignment issues in CSS layouts.
- Discuss the impact of child container overflow on visibility, alignment, and overall layout aesthetics.
- Include best practices for managing child container overflow, such as using overflow properties and clearfix techniques.
- Use practical examples to demonstrate how neighboring elements can be affected by child container overflow.
- Address the importance of controlling overflow to maintain a consistent and visually appealing layout.
- Provide a comprehensive guide on how to handle child container overflow effectively in CSS layouts.
-  Create a detailed SMD on Child Container Overflow in CSS using response #023 and response #025 as references.

---

Pending Tasks:
- Create a Detailed SMD: Develop a comprehensive Study Material Document on Child Container Overflow in CSS using Response #023 and Response #025 as references.
- Text Content Overflow: Address the overflow scenarios related to text content exceeding container dimensions.
- Impact on Neighboring Elements: Explain how child container overflow affects neighboring elements and the overall layout.
- Overflow Property Usage: Discuss all possible usage & use-case of the overflow property in managing child container overflow.
- Root Cause Candidates: Highlight all possible root causes of child container overflow and their impact on the layout.
- Checklists & Best Practices: Include checklists and best practices for managing child container overflow effectively.


- Practice Section: Develop practice exercises to reinforce the concepts of child container overflow in CSS layouts.
    - Practice each example scenario of child container overflow separately.
    - List down each & every example scenario of child container overflow along with detailed explanations.
    - Only width overflow, only height overflow and combination of both in the examples.
    - Text content overflow scenarios and their impact on the layout.
    - Impact on neighboring elements due to child container overflow.
    - Examples of the overflow property in managing child container overflow.
        - Impact of overflow-visible as the default value on child and parent containers.
        - overflow-visible, overflow-hidden, overflow-clip, overflow-scroll and overflow-auto use-cases.
        - overflow-hidden vs overflow-clip scenarios and their differences.
    - Address other possibilities of child container overflow and provide detailed root cause analysis.
    - Create a Comprehensive Detailed Example: Demonstrate a comprehensive example covering all possible use-cases and scenarios.
-

---

Pending Items:
- `clearfix` understanding and its role in managing child container overflow.
- Neighboring Elements Impact - Pushing vs Hiding vs Overlapping.
- Border-box vs Content-box and its impact on child container overflow.
-

---


Detailed Demonstration for 'Overflow Handling in CSS' is PENDING!

Addressing the Impact

Alignment Issues: Overflow can push neighboring elements out of their intended positions.
Visibility: Neighboring elements might become partially or fully hidden if the overflow isnâ€™t managed properly.
Best Practice: Control overflow using overflow properties and consider using clearfix or other layout techniques to maintain alignment.

Example to demonstrate how neighboring elements turn partially or fully hidden due to overflow.

----------------------------------------------------------------------------------------------------
