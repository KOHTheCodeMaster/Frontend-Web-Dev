
Time Stamp: 30th May 2K24 - 07:33 PM..!!

Concept: Shorthand Field Initialization

Dev: K.O.H..!! (Harshit Gupta)

GitHub: https://github.com/KOHTheCodeMaster/Frontend-Web-Dev/

----------------------------------------------------------------------------------------------------

1. Shorthand Field Initialization:
----------------------------------

- TypeScript allows field initialization directly within the constructor parameters, effectively combining field declaration and initialization.
- This eliminates the need for separate field declarations with assignment `this.name = name;`
- Access modifiers are still mandatory when defining fields directly within constructor parameters. You cannot omit them entirely.
- Always explicitly declare access modifiers (`public`, `private`, or `protected`) for fields initialized directly within constructor parameters.

Example:
```typescript
    class Person {
      constructor(public name: string, public age: number) {} // Fields initialized directly
    }

    let john = new Person("John Doe", 30);
    console.log(john.name);  // Accessing field
    console.log(john.age);   // Accessing field
```

Key Points:
- Use access modifiers (`public`, `private`, or `protected`) within the constructor parameters to define access levels.
- This approach promotes code brevity (concise usage).

Note:
- While convenient, it might affect readability for complex classes with many fields.
- Consider separate field declarations for better organization in those cases.


2. Default Access Modifier in Constructor (Without Explicit Specification):
---------------------------------------------------------------------------

- In TypeScript, if you don't explicitly declare an access modifier for a field in the constructor parameter,
- It results in a compile-time error indicating that the property does not exist on the class type.
- This behavior prevents accidental use of fields that haven't been properly defined.
- It enforces to be intentional about the access level of your class members.

Example:

```typescript
    class Person {
      constructor(name: string, age: number) {} // No access modifier specified
    }

    let john = new Person("John Doe", 26);
    console.log(john.name);  // Compile-time error: Property 'name' does not exist on type 'Person'
```

----------------------------------------------------------------------------------------------------
